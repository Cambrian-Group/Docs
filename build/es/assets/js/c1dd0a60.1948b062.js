"use strict";(self.webpackChunkcelo_docs=self.webpackChunkcelo_docs||[]).push([[8005],{3905:function(e,t,o){o.d(t,{Zo:function(){return d},kt:function(){return p}});var n=o(67294);function i(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function r(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function s(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?r(Object(o),!0).forEach((function(t){i(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):r(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,n,i=function(e,t){if(null==e)return{};var o,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||(i[o]=e[o]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)o=r[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):s(s({},t),e)),o},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var o=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),u=c(o),p=i,m=u["".concat(l,".").concat(p)]||u[p]||h[p]||r;return o?n.createElement(m,s(s({ref:t},d),{},{components:o})):n.createElement(m,s({ref:t},d))}));function p(e,t){var o=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=o.length,s=new Array(r);s[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:i,s[1]=a;for(var c=2;c<r;c++)s[c]=o[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,o)}u.displayName="MDXCreateElement"},89233:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return u}});var n=o(83117),i=o(80102),r=(o(67294),o(3905)),s=["components"],a={title:"Locating Nodes",description:"How Celo nodes join the network, establish a connection, and communiate their IP address."},l="Locating Nodes",c={unversionedId:"celo-codebase/protocol/consensus/locating-nodes",id:"celo-codebase/protocol/consensus/locating-nodes",title:"Locating Nodes",description:"How Celo nodes join the network, establish a connection, and communiate their IP address.",source:"@site/docs/celo-codebase/protocol/consensus/locating-nodes.md",sourceDirName:"celo-codebase/protocol/consensus",slug:"/celo-codebase/protocol/consensus/locating-nodes",permalink:"/es/celo-codebase/protocol/consensus/locating-nodes",editUrl:"https://celo.crowdin.com/celo-docs/es",tags:[],version:"current",frontMatter:{title:"Locating Nodes",description:"How Celo nodes join the network, establish a connection, and communiate their IP address."},sidebar:"docs",previous:{title:"Validator Set Differences",permalink:"/es/celo-codebase/protocol/consensus/validator-set-differences"},next:{title:"Celo Ultralight Sync",permalink:"/es/celo-codebase/protocol/consensus/ultralight-sync"}},d=[{value:"V4 Discovery Protocol",id:"v4-discovery-protocol",children:[],level:2},{value:"Joining the Network",id:"joining-the-network",children:[],level:2},{value:"Establishing a Connection",id:"establishing-a-connection",children:[],level:2},{value:"Communicating IP Address",id:"communicating-ip-address",children:[],level:2}],h={toc:d};function u(e){var t=e.components,o=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,n.Z)({},h,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"locating-nodes"},"Locating Nodes"),(0,r.kt)("p",null,"How Celo nodes join the network, establish a connection, and communiate their IP address."),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"v4-discovery-protocol"},"V4 Discovery Protocol"),(0,r.kt)("p",null,"All Celo nodes ","(","including our validators",")"," are using a variant of Ethereum's V4 discovery protocol to find other nodes within the network. Details of Ethereum's protocol can be found ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ethereum/devp2p/blob/master/discv4.md"},"here"),"."),(0,r.kt)("h2",{id:"joining-the-network"},"Joining the Network"),(0,r.kt)("p",null,"When a node attempts to join the network, it will execute Celo's discovery protocol. "),(0,r.kt)("p",null,"It will first send a request to the bootnodes to retrieve a list of other nodes of the network. The bootnodes will then reply with that list, and then the joining node will then send additional requests to nodes in that list to find additional nodes in the network. The main difference in Celo's discovery protocol compared to Ethereum's is that it will require that the joining node's networkID be the same as the bootnodes' ","(","and the same as all other network's nodes",")",". "),(0,r.kt)("p",null,"Also, all of the messages in Celo's discovery protocol must be hashed with a special salt to be accepted by other nodes. The reason why these changes were made is so that each node within a network will only store information of other nodes that have the same networkID (to distinguish nodes from other networks) and the same special salt ","(","to distinguish nodes from other blockchains, such as Ethereum",")","."),(0,r.kt)("h2",{id:"establishing-a-connection"},"Establishing a Connection"),(0,r.kt)("p",null,"Once a joining node finds other nodes, it will establish direct TCP connections to a subset of them. This will allow that node to sync it's blockchain and transactions. Validators will additionally attempt to establish TCP connections to the rest of the validators, so that it can send consensus messages directly to them, instead of via gossip. The reason that the validators do this is to minimize the latency of messages that are sent and received among the validators, and to ultimately help minimize block time."),(0,r.kt)("h2",{id:"communicating-ip-address"},"Communicating IP Address"),(0,r.kt)("p",null,"The way that validators communicate their IP address to other validators is by periodically gossiping a subprotocol message that we call an ",(0,r.kt)("em",{parentName:"p"},"IstanbulAnnounce")," message. "),(0,r.kt)("p",null,"That message will contain ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," copies (where ",(0,r.kt)("inlineCode",{parentName:"p"},"n")," is the total number of validators for the current epoch) of the sending validator's IP address where each copy is encrypted with the other validators' public key. Once a validator receives a gossiped ",(0,r.kt)("em",{parentName:"p"},"IstanbulAnnounce")," message, it will decrypt the encrypted IP address that was encrypted with its public key, and then establish a TCP connection to it. All consensus related messages will then sent via those direct TCP connections. "),(0,r.kt)("p",null,"When an epoch ends, a validator will establish new connections with any newly elected validator and disconnect from any removed validators. If the validator itself is removed from the new epoch's validator set, then it will disconnect with all the validators."))}u.isMDXComponent=!0}}]);