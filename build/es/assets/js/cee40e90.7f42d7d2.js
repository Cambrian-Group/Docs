"use strict";(self.webpackChunkcelo_docs=self.webpackChunkcelo_docs||[]).push([[8671],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(a),d=o,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return a?n.createElement(h,r(r({ref:t},p),{},{components:a})):n.createElement(h,r({ref:t},p))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,r=new Array(i);r[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=a[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},25755:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var n=a(83117),o=a(80102),i=(a(67294),a(3905)),r=["components"],l={title:"Celo Metadata and Claims",description:"How the Celo protocol's metadata and claims feature makes it possible to connect on-chain with off-chain identities."},c="Metadata and Claims",s={unversionedId:"celo-codebase/protocol/identity/metadata",id:"celo-codebase/protocol/identity/metadata",title:"Celo Metadata and Claims",description:"How the Celo protocol's metadata and claims feature makes it possible to connect on-chain with off-chain identities.",source:"@site/docs/celo-codebase/protocol/identity/metadata.md",sourceDirName:"celo-codebase/protocol/identity",slug:"/celo-codebase/protocol/identity/metadata",permalink:"/es/celo-codebase/protocol/identity/metadata",editUrl:"https://celo.crowdin.com/celo-docs/es",tags:[],version:"current",frontMatter:{title:"Celo Metadata and Claims",description:"How the Celo protocol's metadata and claims feature makes it possible to connect on-chain with off-chain identities."},sidebar:"docs",previous:{title:"Phone Number Privacy",permalink:"/es/celo-codebase/protocol/identity/phone-number-privacy"},next:{title:"Celo Randomness",permalink:"/es/celo-codebase/protocol/identity/randomness"}},p=[{value:"Use Cases",id:"use-cases",children:[],level:2},{value:"Types of Claim",id:"types-of-claim",children:[],level:2},{value:"Handling Metadata",id:"handling-metadata",children:[],level:2}],u={toc:p};function m(e){var t=e.components,a=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"metadata-and-claims"},"Metadata and Claims"),(0,i.kt)("p",null,"How the Celo protocol's ",(0,i.kt)("strong",{parentName:"p"},"metadata and claims")," feature makes it possible to connect on-chain with off-chain identities."),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"use-cases"},"Use Cases"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Tools want to present public metadata supplied by a validator or validator group as part of a list of candidate groups, or a list of current elected validators."),(0,i.kt)("li",{parentName:"ul"},"Governance Explorer UIs may want to present public metadata about the creators of governance proposals"),(0,i.kt)("li",{parentName:"ul"},"The Celo Foundation receives notice of a security vulnerability and wants to contact elected validators to facilitate them to make a decision on applying a patch."),(0,i.kt)("li",{parentName:"ul"},"A DApp makes a request to the Celo Wallet for account information or to sign a transaction. The Celo Wallet should provide information about the DApp to allow the user to make a decision whether to sign the transaction or not.")),(0,i.kt)("p",null,"Furthermore, these tools may want to include user chosen information such as names or profile pictures that would be expensive to store on-chain. For this purpose, the Celo protocol supports ",(0,i.kt)("strong",{parentName:"p"},"metadata")," that allows accounts to make both verifiable as well as non-verifiable claims. The design is described in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/celo-org/CIPs/pull/4"},"CIP3"),"."),(0,i.kt)("p",null,"On the ",(0,i.kt)("inlineCode",{parentName:"p"},"Accounts")," smart contract, any account can register a URL under which their metadata file is available. The metadata file contains an unordered list of claims, signed by the account."),(0,i.kt)("h2",{id:"types-of-claim"},"Types of Claim"),(0,i.kt)("p",null,"ContractKit currently supports the following types of claim:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Name Claim")," - An account can claim a human-readable name. This claim is not verifiable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Attestation Service URL Claim")," - For the ",(0,i.kt)("a",{parentName:"p",href:"../"},"lightweight identity layer"),", validators can make a claim under which their Attestation Service is reachable to provide attestations. This claim is not verifiable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Keybase User Claim")," - Accounts can make claims on ",(0,i.kt)("a",{parentName:"p",href:"https://keybase.io"},"Keybase")," usernames. This claim is verifiable by signing a message with the account and hosting it on the publicly accessible path of the Keybase file system.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Domain Claim")," - Accounts can make claims on domain names. This claim is verifiable by signing a message with the account and embedding it in a ",(0,i.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/TXT_record"},"TXT record"),"."))),(0,i.kt)("p",null,"In the future ContractKit may support other types of claim, including:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Twitter User Claim")," - Accounts can make claims on ",(0,i.kt)("a",{parentName:"li",href:"https://twitter.com/"},"Twitter")," usernames. This claim is verifiable by signing a message with the account and posting it as a tweet. Any client can verify the claim with a reference to the tweet in the claim.")),(0,i.kt)("h2",{id:"handling-metadata"},"Handling Metadata"),(0,i.kt)("p",null,"You can interact with metadata files easily through the ",(0,i.kt)("a",{parentName:"p",href:"/es/command-line-interface/account"},"CLI"),", or in your own scripts, tools or DApps via ",(0,i.kt)("a",{parentName:"p",href:"/es/developer-guide/contractkit"},"ContractKit"),". Most commands require a node being available under ",(0,i.kt)("inlineCode",{parentName:"p"},"http://localhost:8545")," to make view calls, and to modify metadata files, you'll need the relevant account to be unlocked to sign the files."),(0,i.kt)("p",null,"You can create an empty metadata file with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"celocli account:create-metadata ./metadata.json --from $ACCOUNT_ADDRESS\n")),(0,i.kt)("p",null,"You can add claims with various commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"celocli account:claim-attestation-service-url ./metadata.json --from $ACCOUNT_ADDRESS --url $ATTESTATION_SERVICE_URL\n")),(0,i.kt)("p",null,"You can display the claims in your file and their status with:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"celocli account:show-metadata ./metadata.json\n")),(0,i.kt)("p",null,"Once you are satisfied with your claims, you can upload your file to your own web site or a site that will host the file (for example, ",(0,i.kt)("a",{parentName:"p",href:"https://gist.github.com"},"https://gist.github.com"),") and then register it with the ",(0,i.kt)("inlineCode",{parentName:"p"},"Accounts")," smart contract by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"celocli account:register-metadata --url $METADATA_URL --from $ACCOUNT_ADDRESS\n")),(0,i.kt)("p",null,"Then, anyone can lookup your claims and verify them by running:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"celocli account:get-metadata $ACCOUNT_ADDRESS\n")))}m.isMDXComponent=!0}}]);