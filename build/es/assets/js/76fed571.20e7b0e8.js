"use strict";(self.webpackChunkcelo_docs=self.webpackChunkcelo_docs||[]).push([[2241],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=o.createContext({}),l=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return o.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),m=l(n),p=a,h=m["".concat(i,".").concat(p)]||m[p]||u[p]||r;return n?o.createElement(h,s(s({ref:t},d),{},{components:n})):o.createElement(h,s({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,s=new Array(r);s[0]=m;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<r;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},93565:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return l},assets:function(){return d},toc:function(){return u},default:function(){return p}});var o=n(83117),a=n(80102),r=(n(67294),n(3905)),s=["components"],c={title:"Code Playground -- Metamask",description:"Playing with Metamask",slug:"code-metamask",authors:[{name:"Josh Crites",title:"Developer Relations, cLabs",url:"https://github.com/critesjosh",image_url:"https://github.com/critesjosh.png"}],tags:["code playground"],image:"https://dl.airtable.com/.attachmentThumbnails/a7e530eb72ac8f30f37c0a3447ef0e7d/72e944da",hide_table_of_contents:!1},i=void 0,l={permalink:"/es/blog/code-metamask",source:"@site/blog/2021-11-16-connect-to-metamask.md",title:"Code Playground -- Metamask",description:"Playing with Metamask",date:"2021-11-16T00:00:00.000Z",formattedDate:"16 de noviembre de 2021",tags:[{label:"code playground",permalink:"/es/blog/tags/code-playground"}],readingTime:1.69,truncated:!0,authors:[{name:"Josh Crites",title:"Developer Relations, cLabs",url:"https://github.com/critesjosh",image_url:"https://github.com/critesjosh.png",imageURL:"https://github.com/critesjosh.png"}],prevItem:{title:"Using the Graph w/ Celo",permalink:"/es/blog/using-the-graph"},nextItem:{title:"Intro to the Code Playground",permalink:"/es/blog/code-playground"}},d={authorsImageUrls:[void 0]},u=[{value:"Connect to Metamask",id:"connect-to-metamask",children:[{value:"Switch Networks",id:"switch-networks",children:[],level:3},{value:"Add Tokens",id:"add-tokens",children:[],level:3},{value:"Send Tokens",id:"send-tokens",children:[],level:3}],level:2}],m={toc:u};function p(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Let's see how we can interact with Metamask from the code playground. We can connect to Metamask, switch networks, add tokens to the Metamask asset list and send them to other accounts."),(0,r.kt)("p",null,"This post uses a live code editor. Check out ",(0,r.kt)("a",{parentName:"p",href:"/es/blog/code-playground"},"this post")," to learn more about how it works."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Make sure that you have have ",(0,r.kt)("a",{parentName:"p",href:"https://metamask.io"},"Metamask installed")," in your browser."))),(0,r.kt)("h2",{id:"connect-to-metamask"},"Connect to Metamask"),(0,r.kt)("p",null,"The following example shows how to connect Metamask to this browser page."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"This function will only trigger an action if Metamask is not yet connect to the site. If you've already connected, nothing will happen."))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function connect() {\n  function connectMetamask() {\n    ethereum.request({ method: "eth_requestAccounts" });\n  }\n\n  return <button onClick={connectMetamask}>Connect Metamask</button>;\n}\n')),(0,r.kt)("h3",{id:"switch-networks"},"Switch Networks"),(0,r.kt)("p",null,"This example shows how you can prompt a user to connect to a specific Celo network. This component renders two buttons, one to connect to Celo mainnet and one to connect to the Alfajores testnet. If you try to connect to a network that you are already connected to, nothing happens."),(0,r.kt)("p",null,"Try it out:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function MetamaskSwitchNetwork() {\n  const NETWORK_PARAMS = {\n    chainName: "Celo",\n    nativeCurrency: {\n      name: "Celo",\n      symbol: "CELO",\n      decimals: 18,\n    },\n  };\n\n  const MAINNET_PARAMS = {\n    ...NETWORK_PARAMS,\n    chainId: "0xa4ec", // 42220\n    rpcUrls: ["https://forno.celo.org"],\n    blockExplorerUrls: ["https://explorer.celo.org/"],\n  };\n\n  const ALFAJORES_PARAMS = {\n    ...NETWORK_PARAMS,\n    chainId: "0xaef3", // 44787\n    rpcUrls: ["https://alfajores-forno.celo-testnet.org"],\n    blockExplorerUrls: ["https://alfajores-blockscout.celo-testnet.org/"],\n  };\n\n  function addMainnet() {\n    window.ethereum.request({\n      method: "wallet_addEthereumChain",\n      params: [MAINNET_PARAMS],\n    });\n  }\n\n  function addAlfajores() {\n    window.ethereum.request({\n      method: "wallet_addEthereumChain",\n      params: [ALFAJORES_PARAMS],\n    });\n  }\n\n  return (\n    <div>\n      <button onClick={addMainnet}>Connect to Celo Mainnet</button>\n      <br />\n      <button onClick={addAlfajores}>Connect to Alfajores Testnet</button>\n      <br />\n    </div>\n  );\n}\n')),(0,r.kt)("h3",{id:"add-tokens"},"Add Tokens"),(0,r.kt)("p",null,"The following code example shows how you can add the cUSD token on the Alfajores testnet to Metamask. To add other tokens, just update the parameter options. You can read more about the Metamask API ",(0,r.kt)("a",{parentName:"p",href:"https://docs.metamask.io/guide/rpc-api.html#wallet-watchasset"},"here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function MetamaskAddToken() {\n  const TOKEN_PARAMS = {\n    type: "ERC20",\n    options: {\n      address: "0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1",\n      symbol: "cUSD",\n      decimals: 18,\n    },\n  };\n\n  function addToken() {\n    window.ethereum.request({\n      method: "wallet_watchAsset",\n      params: TOKEN_PARAMS,\n    });\n  }\n\n  return <button onClick={addToken}>Add cUSD (Alfajores)</button>;\n}\n')),(0,r.kt)("h3",{id:"send-tokens"},"Send Tokens"),(0,r.kt)("p",null,"Let's try to send some CELO on Alfajores. Make sure you are connected to the Alfajores testnet, you can double check by clicking the ",(0,r.kt)("inlineCode",{parentName:"p"},"Connect to Alfajores Testnet")," button above again."),(0,r.kt)("p",null,"Make sure you have some Alfajores CELO to send. If you need some, you can get some from ",(0,r.kt)("a",{parentName:"p",href:"https://celo.org/developers/faucet"},"the faucet here"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function MetamaskSendCelo() {\n  const TX_PARAMS = {\n    to: "0x5038ae19CDf0B623e6e8015249ecF58A1165D653",\n    from: ethereum.selectedAddress,\n    value: "0x11111111111111",\n  };\n\n  async function send() {\n    let txID = await window.ethereum.request({\n      method: "eth_sendTransaction",\n      params: [TX_PARAMS],\n    });\n    console.log(txID);\n  }\n\n  return <button onClick={send}>Send CELO (Alfajores)</button>;\n}\n')),(0,r.kt)("p",null,"Click the button to send some CELO. Once you click submit, the transaction id will be logged in the browser console!"),(0,r.kt)("p",null,"To send cUSD or interact with any other smart contract, you will have to encode the data and include it in the transaction data field. Libraries like ",(0,r.kt)("a",{parentName:"p",href:"https://web3js.readthedocs.io/en/v1.5.2/"},"web3.js")," and ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@celo/contractkit"},"contractkit")," make this easier. We will go over using web3.js and contractkit in future posts."))}p.isMDXComponent=!0}}]);