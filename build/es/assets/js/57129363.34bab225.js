"use strict";(self.webpackChunkcelo_docs=self.webpackChunkcelo_docs||[]).push([[2521],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),s=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=s(e.components);return i.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?i.createElement(f,a(a({ref:t},d),{},{components:n})):i.createElement(f,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var s=2;s<o;s++)a[s]=n[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},55113:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var i=n(83117),r=n(80102),o=(n(67294),n(3905)),a=["components"],c={},l="celocli identity",s={unversionedId:"command-line-interface/identity",id:"command-line-interface/identity",title:"celocli identity",description:"Interact with ODIS and the attestations service",source:"@site/docs/command-line-interface/identity.md",sourceDirName:"command-line-interface",slug:"/command-line-interface/identity",permalink:"/es/command-line-interface/identity",editUrl:"https://celo.crowdin.com/celo-docs/es",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"celocli help",permalink:"/es/command-line-interface/help"},next:{title:"celocli lockedgold",permalink:"/es/command-line-interface/lockedgold"}},d=[{value:"<code>celocli identity:current-attestation-services</code>",id:"celocli-identitycurrent-attestation-services",children:[],level:2},{value:"<code>celocli identity:get-attestations</code>",id:"celocli-identityget-attestations",children:[],level:2},{value:"<code>celocli identity:identifier</code>",id:"celocli-identityidentifier",children:[],level:2},{value:"<code>celocli identity:test-attestation-service</code>",id:"celocli-identitytest-attestation-service",children:[],level:2},{value:"<code>celocli identity:withdraw-attestation-rewards</code>",id:"celocli-identitywithdraw-attestation-rewards",children:[],level:2}],p={toc:d};function u(e){var t=e.components,n=(0,r.Z)(e,a);return(0,o.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"celocli-identity"},(0,o.kt)("inlineCode",{parentName:"h1"},"celocli identity")),(0,o.kt)("p",null,"Interact with ODIS and the attestations service"),(0,o.kt)("h2",{id:"celocli-identitycurrent-attestation-services"},(0,o.kt)("inlineCode",{parentName:"h2"},"celocli identity:current-attestation-services")),(0,o.kt)("p",null,"Outputs the set of validators currently participating in BFT and which ones are participating in Celo's lightweight identity protocol"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Outputs the set of validators currently participating in BFT and which ones are participating in Celo's lightweight identity protocol\n\nUSAGE\n  $ celocli identity:current-attestation-services\n\nOPTIONS\n  -x, --extended          show extra columns\n  --columns=columns       only show provided columns (comma-separated)\n  --csv                   output is csv format [alias: --output=csv]\n  --filter=filter         filter property by partial string matching, ex: name=foo\n  --globalHelp            View all available global flags\n  --no-header             hide table header from output\n  --no-truncate           do not truncate output to fit screen\n  --output=csv|json|yaml  output in a more machine friendly format\n  --sort=sort             property to sort by (prepend '-' for descending)\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"See code: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/identity/current-attestation-services.ts"},"src/commands/identity/current-attestation-services.ts"))),(0,o.kt)("h2",{id:"celocli-identityget-attestations"},(0,o.kt)("inlineCode",{parentName:"h2"},"celocli identity:get-attestations")),(0,o.kt)("p",null,"Looks up attestations associated with the provided phone number. If a pepper is not provided, it uses the --from account's balance to query the pepper."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Looks up attestations associated with the provided phone number. If a pepper is not provided, it uses the --from account's balance to query the pepper.\n\nUSAGE\n  $ celocli identity:get-attestations\n\nOPTIONS\n  --from=from                Account whose balance to use for querying ODIS for the\n                             pepper lookup\n\n  --globalHelp               View all available global flags\n\n  --identifier=identifier    On-chain identifier\n\n  --network=network          The ODIS service to hit: mainnet, alfajores,\n                             alfajoresstaging\n\n  --pepper=pepper            ODIS phone number pepper\n\n  --phoneNumber=phoneNumber  Phone number to check attestations for\n\nEXAMPLES\n  get-attestations --phoneNumber +15555555555 --from\n  0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95\n\n  get-attestations --phoneNumber +15555555555 --pepper XgnKVpplZc0p1\n\n  get-attestations --identifier\n  0x4952c9db9c283a62721b13f56c4b5e84a438e2569af3de21cb3440efa8840872\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"See code: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/identity/get-attestations.ts"},"src/commands/identity/get-attestations.ts"))),(0,o.kt)("h2",{id:"celocli-identityidentifier"},(0,o.kt)("inlineCode",{parentName:"h2"},"celocli identity:identifier")),(0,o.kt)("p",null,"Queries ODIS for the on-chain identifier and pepper corresponding to a given phone number."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Queries ODIS for the on-chain identifier and pepper corresponding to a given phone number.\n\nUSAGE\n  $ celocli identity:identifier\n\nOPTIONS\n  --context=context                                  mainnet (default), alfajores, or\n                                                     alfajoresstaging\n\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) The address from which\n                                                     to perform the query\n\n  --globalHelp                                       View all available global flags\n\n  --phoneNumber=+14152223333                         (required) The phone number for\n                                                     which to query the identifier.\n                                                     Should be in e164 format with\n                                                     country code.\n\nEXAMPLE\n  identifier --phoneNumber +14151231234 --from\n  0x5409ed021d9299bf6814279a6a1411a7e866a631 --context alfajores\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"See code: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/identity/identifier.ts"},"src/commands/identity/identifier.ts"))),(0,o.kt)("h2",{id:"celocli-identitytest-attestation-service"},(0,o.kt)("inlineCode",{parentName:"h2"},"celocli identity:test-attestation-service")),(0,o.kt)("p",null,"Tests whether the account has setup the attestation service properly by calling the test endpoint on it"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'Tests whether the account has setup the attestation service properly by calling the test endpoint on it\n\nUSAGE\n  $ celocli identity:test-attestation-service\n\nOPTIONS\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Your validator\'s signer\n                                                     or account address\n\n  --globalHelp                                       View all available global flags\n\n  --message=message                                  (required) The message of the SMS\n\n  --phoneNumber=+14152223333                         (required) The phone number to send\n                                                     the test message to\n\n  --provider=provider                                Test a specific provider (try\n                                                     "twilio" or "nexmo")\n\nEXAMPLE\n  test-attestation-service --from 0x97f7333c51897469E8D98E7af8653aAb468050a3\n')),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"See code: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/identity/test-attestation-service.ts"},"src/commands/identity/test-attestation-service.ts"))),(0,o.kt)("h2",{id:"celocli-identitywithdraw-attestation-rewards"},(0,o.kt)("inlineCode",{parentName:"h2"},"celocli identity:withdraw-attestation-rewards")),(0,o.kt)("p",null,"Withdraw accumulated attestation rewards for a given currency"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Withdraw accumulated attestation rewards for a given currency\n\nUSAGE\n  $ celocli identity:withdraw-attestation-rewards\n\nOPTIONS\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d          (required) Address to\n                                                             withdraw from. Can be the\n                                                             attestation signer address\n                                                             or the underlying account\n                                                             address\n\n  --globalHelp                                               View all available global\n                                                             flags\n\n  --tokenAddress=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  The address of the token\n                                                             that will be withdrawn.\n                                                             Defaults to cUSD\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"See code: ",(0,o.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/identity/withdraw-attestation-rewards.ts"},"src/commands/identity/withdraw-attestation-rewards.ts"))))}u.isMDXComponent=!0}}]);