"use strict";(self.webpackChunkcelo_docs=self.webpackChunkcelo_docs||[]).push([[5272],{3905:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return h}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(a),h=r,m=u["".concat(s,".").concat(h)]||u[h]||p[h]||o;return a?n.createElement(m,l(l({ref:t},d),{},{components:a})):n.createElement(m,l({ref:t},d))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},77455:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return d},N:function(){return p},default:function(){return h}});var n=a(83117),r=a(80102),o=(a(67294),a(3905)),l=["components"],i={title:"Celo Smart Contracts Release Process",description:"Details of the release process for updating smart contracts on the Celo platform."},s="Smart Contracts Release Process",c={unversionedId:"community/release-process/smart-contracts",id:"community/release-process/smart-contracts",title:"Celo Smart Contracts Release Process",description:"Details of the release process for updating smart contracts on the Celo platform.",source:"@site/docs/community/release-process/smart-contracts.mdx",sourceDirName:"community/release-process",slug:"/community/release-process/smart-contracts",permalink:"/community/release-process/smart-contracts",editUrl:"https://github.com/celo-org/docs/edit/main/docs/community/release-process/smart-contracts.mdx",tags:[],version:"current",frontMatter:{title:"Celo Smart Contracts Release Process",description:"Details of the release process for updating smart contracts on the Celo platform."},sidebar:"contributors",previous:{title:"Celo Release Process",permalink:"/community/release-process/"},next:{title:"Celo Blockchain Client Release Process",permalink:"/community/release-process/blockchain-client"}},d=[{value:"Versioning",id:"versioning",children:[{value:"Core Contracts",id:"core-contracts",children:[],level:3},{value:"Mixins and libraries",id:"mixins-and-libraries",children:[],level:3},{value:"Initialize Data",id:"initialize-data",children:[],level:3},{value:"Release management in Git/Github",id:"release-management-in-gitgithub",children:[{value:"When a new release branch is cut:",id:"when-a-new-release-branch-is-cut",children:[],level:4},{value:"After a completed release process:",id:"after-a-completed-release-process",children:[],level:4}],level:3}],level:2},{value:"Release Process",id:"release-process",children:[{value:"View the tagged releases for each network",id:"view-the-tagged-releases-for-each-network",children:[],level:3},{value:"Verify the previous Release on the Network",id:"verify-the-previous-release-on-the-network",children:[],level:3},{value:"Check Backward Compatibility",id:"check-backward-compatibility",children:[],level:3},{value:"Deploy the release candidate",id:"deploy-the-release-candidate",children:[],level:3},{value:"Submit Upgrade Proposal",id:"submit-upgrade-proposal",children:[],level:3},{value:"Fetch Upgrade Proposal",id:"fetch-upgrade-proposal",children:[],level:3},{value:"Verify Proposed Release Candidate",id:"verify-proposed-release-candidate",children:[],level:3},{value:"Verify Executed Release",id:"verify-executed-release",children:[],level:3}],level:2},{value:"Testing",id:"testing",children:[{value:"Unit tests",id:"unit-tests",children:[],level:3},{value:"Manual Checklist",id:"manual-checklist",children:[],level:3},{value:"Automated environment tests",id:"automated-environment-tests",children:[],level:3},{value:"Performance",id:"performance",children:[],level:3},{value:"Backwards compatibility",id:"backwards-compatibility",children:[],level:3},{value:"Audits",id:"audits",children:[],level:3},{value:"Emergency patches",id:"emergency-patches",children:[],level:3}],level:2},{value:"Promotion process",id:"promotion-process",children:[{value:"Communication guidelines",id:"communication-guidelines",children:[],level:3},{value:"Emergency patches",id:"emergency-patches-1",children:[],level:3}],level:2},{value:"Vulnerability Disclosure",id:"vulnerability-disclosure",children:[],level:2},{value:"Dependencies",id:"dependencies",children:[],level:2},{value:"Dependents",id:"dependents",children:[],level:2}],p="N",u={toc:d,N:p};function h(e){var t=e.components,a=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"smart-contracts-release-process"},"Smart Contracts Release Process"),(0,o.kt)("p",null,"Details of the release process for updating smart contracts on the Celo platform."),(0,o.kt)("hr",null),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"This release process is a work in progress. Many infrastructure components required to execute it are not in place, and the process itself is subject to change."))),(0,o.kt)("h2",{id:"versioning"},"Versioning"),(0,o.kt)("p",null,"Each deployed Celo core smart contract is versioned independently, according to semantic versioning, as described at ",(0,o.kt)("a",{parentName:"p",href:"https://semver.org"},"semver.org"),", with the following modifications:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"STORAGE version when you make incompatible storage layout changes"),(0,o.kt)("li",{parentName:"ul"},"MAJOR version when you make incompatible ABI changes"),(0,o.kt)("li",{parentName:"ul"},"MINOR version when you add functionality in a backwards compatible manner, and"),(0,o.kt)("li",{parentName:"ul"},"PATCH version when you make backwards compatible bug fixes.")),(0,o.kt)("p",null,"Changes to core smart contracts are made via on-chain Governance, approximately four times a year. When a release is made, ",(0,o.kt)("strong",{parentName:"p"},"all")," smart contracts from the release branch that differ from the deployed smart contracts are released, and included in the ",(0,o.kt)("strong",{parentName:"p"},"same")," governance proposal. Each release is identified by a unique monotonically increasing version number ",(0,o.kt)("inlineCode",{parentName:"p"},"N"),", with ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," being the first release."),(0,o.kt)("h3",{id:"core-contracts"},"Core Contracts"),(0,o.kt)("p",null,"Every deployed Celo core contract has its current version number as a constant which is publicly accessible via the ",(0,o.kt)("inlineCode",{parentName:"p"},"getVersion()")," function, which returns the storage, major, minor, and patch version. Version number is encoded in the Solidity source and updated as part of code changes."),(0,o.kt)("p",null,"Celo Core Contracts deployed to a live network without the ",(0,o.kt)("inlineCode",{parentName:"p"},"getVersion()")," function, such as the original set of core contracts, are to be considered version ",(0,o.kt)("inlineCode",{parentName:"p"},"1.1.0.0"),"."),(0,o.kt)("h3",{id:"mixins-and-libraries"},"Mixins and libraries"),(0,o.kt)("p",null,"Mixin contracts and libraries are considered part of the contracts that consume them. When a mixin or library has changed, all contracts that consume them should be considered to have changed as well, and thus the contracts should have their version numbers incremented and should be re-deployed as part of the next smart contract release."),(0,o.kt)("h3",{id:"initialize-data"},"Initialize Data"),(0,o.kt)("p",null,"Whenever Celo Core Contracts need to be re-initialized, their initialization arguments should be checked into version control under ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/protocol/releaseData/initializationData/release${N}.json"),"."),(0,o.kt)("h3",{id:"release-management-in-gitgithub"},"Release management in Git/Github"),(0,o.kt)("p",null,"Github branches/tags and Github releases are used to coordinate past and ongoing releases. Ongoing smart contract development is done on the ",(0,o.kt)("inlineCode",{parentName:"p"},"master")," branch (even after release branches are cut). Every smart contract release has a designated release branch, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"release/core-contracts/${N}")," in the celo-monorepo."),(0,o.kt)("h4",{id:"when-a-new-release-branch-is-cut"},"When a new release branch is cut:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"A new release branch is created ",(0,o.kt)("inlineCode",{parentName:"li"},"release/core-contracts/${N}")," with the contracts to be audited."),(0,o.kt)("li",{parentName:"ol"},"The latest commit on the release branch is tagged with ",(0,o.kt)("inlineCode",{parentName:"li"},"core-contracts.v${N}.pre-audit"),"."),(0,o.kt)("li",{parentName:"ol"},"On Github, a pre-release Github release should be created pointing at the latest tag on the release branch."),(0,o.kt)("li",{parentName:"ol"},"On master branch, ",(0,o.kt)("inlineCode",{parentName:"li"},".circleci/config.yml")," should be edited so that the variable ",(0,o.kt)("inlineCode",{parentName:"li"},"RELEASE_TAG")," points to the tag ",(0,o.kt)("inlineCode",{parentName:"li"},"celo-core-contracts-v${N}.pre-audit")," so that all future changes to master are versioned against the new release."),(0,o.kt)("li",{parentName:"ol"},"Ongoing audit responses/fixes should continue to go into ",(0,o.kt)("inlineCode",{parentName:"li"},"release/celo-core-contracts/${N}"),".")),(0,o.kt)("h4",{id:"after-a-completed-release-process"},"After a completed release process:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The release branch should be merged into ",(0,o.kt)("inlineCode",{parentName:"li"},"master")," with a merge commit (instead of the usual squash merge strategy)."),(0,o.kt)("li",{parentName:"ol"},"On master branch, ",(0,o.kt)("inlineCode",{parentName:"li"},".circleci/config.yml")," should be edited so that the variable ",(0,o.kt)("inlineCode",{parentName:"li"},"RELEASE_TAG")," points to the tag ",(0,o.kt)("inlineCode",{parentName:"li"},"core-contracts.v${N}"))),(0,o.kt)("h2",{id:"release-process"},"Release Process"),(0,o.kt)("p",null,"There are several scripts provided (under ",(0,o.kt)("inlineCode",{parentName:"p"},"packages/protocol")," in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/celo-org/celo-monorepo"},"celo-org/celo-monorepo")," and via for use in the release process and with contract upgrade governance proposals to give participating stakeholders increased confidence."),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"For these to run, you may need to follow the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/celo-org/celo-monorepo/blob/master/SETUP.md"},"setup instructions"),". These steps include installing Node and setting ",(0,o.kt)("inlineCode",{parentName:"p"},"nvm")," to use the correct version of Node. Successful ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn install")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"yarn build")," in the protocol package signal a completed setup."))),(0,o.kt)("p",null,"Using these tools, a contract release candidate can be built, deployed, and proposed for upgrade automatically on a specified network. Subsequently, stakeholders can verify the release candidate against a governance upgrade proposal's contents on the network."),(0,o.kt)("p",null,"Typical script options:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"By default, the scripts expect a celo-blockchain RPC at port 8545 locally. With ",(0,o.kt)("inlineCode",{parentName:"li"},"-f")," you can specify the scripts to use a hosted forno node"),(0,o.kt)("li",{parentName:"ul"},"By default, scripts will output verbose logs under ",(0,o.kt)("inlineCode",{parentName:"li"},"/tmp/celo-${script-name}.log"),". You can change the location of the log output with ",(0,o.kt)("inlineCode",{parentName:"li"},"-l file.log"))),(0,o.kt)("h3",{id:"view-the-tagged-releases-for-each-network"},"View the tagged releases for each network"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn view-tags\n")),(0,o.kt)("h3",{id:"verify-the-previous-release-on-the-network"},"Verify the previous Release on the Network"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"verify-deployed")," is a script that allows you to assess whether the bytecode on the given network matches the source code of a particular commit. It will run through the Celo Core Contracts and verify that the contracts' bytecodes as specified in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Registry")," match. Here, we will want to sanity-check that our network is running the previous release's audited commit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Run from `packages/protocol` in the celo-monorepo\nPREVIOUS_RELEASE="core-contracts.v${N-1}"\nNETWORK=${"baklava"|"alfajores"|"mainnet"}\n# A -f boolean flag can be provided to use a forno full node to connect to the provided network\nyarn verify-deployed -n $NETWORK -b $PREVIOUS_RELEASE -f\n')),(0,o.kt)("p",null,"A ",(0,o.kt)("inlineCode",{parentName:"p"},"libraries.json")," file is written to disk only necessary for ",(0,o.kt)("inlineCode",{parentName:"p"},"make-release")," that describes linked library addresses."),(0,o.kt)("h3",{id:"check-backward-compatibility"},"Check Backward Compatibility"),(0,o.kt)("p",null,"This script performs some automatic checks to ensure that the smart contract versions in source code have been set correctly with respect to the latest release. It is run as part of CI and helps ensure that backwards incompatibilities are not accidentally introduced by requiring that devs manually update version numbers whenever smart contract changes are made."),(0,o.kt)("p",null,"Specifically, it compiles the latest and candidate releases and compares smart contracts:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Storage layout, to detect storage version changes"),(0,o.kt)("li",{parentName:"ol"},"ABI, to detect major and minor version changes"),(0,o.kt)("li",{parentName:"ol"},"Bytecode, to detect patch version changes")),(0,o.kt)("p",null,"Finally, it checks release candidate smart contract version numbers and requires that they have been updated appropriately since the latest release by following semantic versioning as defined in the ",(0,o.kt)("a",{parentName:"p",href:"#Versioning"},"Versioning section")," above."),(0,o.kt)("p",null,"The following exceptions apply:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If the STORAGE version has changed, does not perform backwards compatibility checks"),(0,o.kt)("li",{parentName:"ul"},"If the MAJOR version has changed, checks storage layout compatibility but not ABI compatibility")),(0,o.kt)("p",null,"Critically, this ensures that proxied contracts do not experience storage\ncollisions between implementation versions. See ",(0,o.kt)("a",{parentName:"p",href:"https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies#storage-collisions-between-implementation-versions"},"this\narticle"),"\nby OpenZeppelin for a good overview of this problem and why it's important to\ncheck for it."),(0,o.kt)("p",null,"The script generates a detailed report on version changes in JSON format."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'PREVIOUS_RELEASE="core-contracts.v${N-1}"\nRELEASE_CANDIDATE="core-contracts.v${N}"\nyarn check-versions -a $PREVIOUS_RELEASE -b $RELEASE_CANDIDATE -r "report.json"\n')),(0,o.kt)("p",null,"This should be used in tandem with ",(0,o.kt)("inlineCode",{parentName:"p"},"verify-deployed -b $PREVIOUS_RELEASE -n $NETWORK")," to ensure the compatibility checks compare the release candidate to what is actually active on the network."),(0,o.kt)("h3",{id:"deploy-the-release-candidate"},"Deploy the release candidate"),(0,o.kt)("p",null,"Use the following script to build and deploy a candidate release. This takes as input the corresponding backwards compatibility report and canonical library address mapping to deploy ",(0,o.kt)("strong",{parentName:"p"},"changed")," contracts to the specified network. (Use ",(0,o.kt)("inlineCode",{parentName:"p"},"-d")," to dry-run the deploy).\nSTORAGE updates are adopted by deploying a new proxy/implementation pair. This script outputs a JSON contract upgrade governance proposal."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'NETWORK=${"baklava"|"alfajores"|"mainnet"}\nRELEASE_CANDIDATE="core-contracts.v${N}"\nyarn make-release -b $RELEASE_CANDIDATE -n $NETWORK -r "report.json" -i "releaseData/initializationData/release${N}.json" -p "proposal.json" -l "libraries.json"\n')),(0,o.kt)("p",null,"The proposal encodes STORAGE updates by repointing the Registry to the new proxy. Storage compatible upgrades are encoded by repointing the existing proxy's implementation."),(0,o.kt)("h3",{id:"submit-upgrade-proposal"},"Submit Upgrade Proposal"),(0,o.kt)("p",null,"Submit the autogenerated upgrade proposal to the Governance contract for review by voters, outputting a unique identifier."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# resultant proposal ID should be communicated publicly\ncelocli governance:propose --deposit 100e18 --from $YOUR_ADDRESS --jsonTransactions "proposal.json"\n')),(0,o.kt)("h3",{id:"fetch-upgrade-proposal"},"Fetch Upgrade Proposal"),(0,o.kt)("p",null,"Fetch the upgrade proposal and output the JSON encoded proposal contents."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'# Make sure you run at least celocli 0.0.60\ncelocli governance:show --proposalID <proposalId> --jsonTransactions "upgrade_proposal.json"\n')),(0,o.kt)("h3",{id:"verify-proposed-release-candidate"},"Verify Proposed Release Candidate"),(0,o.kt)("p",null,"This script serves the same purpose as ",(0,o.kt)("inlineCode",{parentName:"p"},"verify-deployed")," but for a not-yet\naccepted contract upgrade (in the form of the proposal.json you fetched in the step prior). It gives you the confidence that the branch specified in the ",(0,o.kt)("inlineCode",{parentName:"p"},"-b")," flag in (same as ",(0,o.kt)("inlineCode",{parentName:"p"},"check-versions"),") will be the resulting network state of the proposal if executed. It does so by going over all Celo Core Contracts and determining updates to the Registry pointers, proxy or implementation contracts and verifying their implied bytecode against the compiled source code."),(0,o.kt)("p",null,"Additionally, include ",(0,o.kt)("inlineCode",{parentName:"p"},"initialization_data.json")," from the CGP if any of the contracts have to be initialized."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'RELEASE_CANDIDATE="core-contracts.v${N}"\nNETWORK=${"baklava"|"alfajores"|"mainnet"}\n# A -f boolean flag can be provided to use a forno full node to connect to the provided network\nyarn verify-release -p "upgrade_proposal.json" -b $RELEASE_CANDIDATE -n $NETWORK -f -i initialization_data.json\n')),(0,o.kt)("h3",{id:"verify-executed-release"},"Verify Executed Release"),(0,o.kt)("p",null,"After a release executes via Governance, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"verify-deployed")," again to check that the resulting network state does indeed reflect the tagged release candidate:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'RELEASE="core-contracts.v${N}"\nNETWORK=${"baklava"|"alfajores"|"mainnet"}\nyarn verify-deployed -n $NETWORK -b $RELEASE -f\n')),(0,o.kt)("h2",{id:"testing"},"Testing"),(0,o.kt)("p",null,"All releases should be evaluated according to the following tests."),(0,o.kt)("h3",{id:"unit-tests"},"Unit tests"),(0,o.kt)("p",null,"All changes since the last release should be covered by unit tests. Unit test coverage should be enforced by automated checks run on every commit."),(0,o.kt)("h3",{id:"manual-checklist"},"Manual Checklist"),(0,o.kt)("p",null,"After a successful release execution on a testnet, the resulting network state should be spot-checked to ensure that no regressions have been caused by the release. Flows to test include:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Do a cUSD and CELO transfer",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"celocli transfer:dollars --from <addr> --value <number> --to <addr>\ncelocli transfer:celo --from <addr> --value <number> --to <addr>\n"))),(0,o.kt)("li",{parentName:"ul"},"Register a Celo account",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"celocli account:register --from <addr> --name <test-name>\n"))),(0,o.kt)("li",{parentName:"ul"},"Report an Oracle rate",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"celocli oracle:report --from <addr> --value <num>\n"))),(0,o.kt)("li",{parentName:"ul"},"Do a CP-DOTO exchange",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"celocli exchange:celo --value <number> --from <addr>\ncelocli exchange:dollars --value <number> --from <addr>\n"))),(0,o.kt)("li",{parentName:"ul"},"Complete a round of attestation"),(0,o.kt)("li",{parentName:"ul"},"Redeem from Escrow"),(0,o.kt)("li",{parentName:"ul"},"Register a Vaildator",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"celocli validator:register --blsKey <hexString> --blsSignature <hexString> --ecdsaKey <hexString> --from <addr>\n"))),(0,o.kt)("li",{parentName:"ul"},"Vote for a Validator"),(0,o.kt)("li",{parentName:"ul"},"Run a mock election",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"celocli election:run\n"))),(0,o.kt)("li",{parentName:"ul"},"Get a valildator slashed for downtime and ejected from the validator set"),(0,o.kt)("li",{parentName:"ul"},"Propose a governance proposal and get it executed",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"celocli governance:propose --jsonTransactions <jsonFile> --deposit <number> --from <addr> --descriptionURL https://gist.github.com/yorhodes/46430eacb8ed2f73f7bf79bef9d58a33\n")))),(0,o.kt)("h3",{id:"automated-environment-tests"},"Automated environment tests"),(0,o.kt)("p",null,"Stakeholders can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"env-tests")," package in ",(0,o.kt)("inlineCode",{parentName:"p"},"celo-monorepo")," to run an automated test suite against the network"),(0,o.kt)("h3",{id:"performance"},"Performance"),(0,o.kt)("p",null,"A ceiling on the gas consumption for all common operations should be defined and enforced by automated checks run on every commit."),(0,o.kt)("h3",{id:"backwards-compatibility"},"Backwards compatibility"),(0,o.kt)("p",null,"Automated checks should ensure that any new commit to ",(0,o.kt)("inlineCode",{parentName:"p"},"master")," does not introduce a breaking change to storage layout, ABI, or other common backwards compatibility issues unless the STORAGE or MAJOR version numbers are incremented."),(0,o.kt)("p",null,"Backwards compatibility tests will also be run before every release to confirm that no breaking changes exist between the pending release and deployed smart contracts."),(0,o.kt)("h3",{id:"audits"},"Audits"),(0,o.kt)("p",null,"All changes since the last release should be audited by a reputable third party auditor."),(0,o.kt)("h3",{id:"emergency-patches"},"Emergency patches"),(0,o.kt)("p",null,"If patches need to be applied before the next scheduled smart contract release, they should be cherry picked to a new release branch, branched from the latest deployed release branch."),(0,o.kt)("h2",{id:"promotion-process"},"Promotion process"),(0,o.kt)("p",null,"Deploying a new contract release should occur with the following process. On-chain governance proposals should be submitted on Tuesdays for consistency and predictability."),(0,o.kt)("table",null,(0,o.kt)("tr",null,(0,o.kt)("td",null,"Date"),(0,o.kt)("td",null,"Action")),(0,o.kt)("tr",null,(0,o.kt)("td",null,"T"),(0,o.kt)("td",null,(0,o.kt)("ol",null,(0,o.kt)("li",null,"Create a Github issue tracking all these checklist items as an audit log"),(0,o.kt)("li",null,"Implement the"," ",(0,o.kt)("a",{href:"#When-a-new-release-branch-is-cut"},"git management steps")," ","for when a new release branch is cut."),(0,o.kt)("li",null,"Submit release branch to a reputable third party auditor for review."),(0,o.kt)("li",null,"Begin drafting release notes.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"T+1w"),(0,o.kt)("td",null,(0,o.kt)("ol",null,(0,o.kt)("li",null,"Receive report from auditors."),(0,o.kt)("li",null,"Add audit summary to final draft of the release notes."),(0,o.kt)("li",null,"If all issues in the audit report have straightforward fixes:",(0,o.kt)("ol",null,(0,o.kt)("li",null," ","Submit a governance proposal draft using this format: https://github.com/celo-org/celo-proposals/blob/master/CGPs/template.md"),(0,o.kt)("li",null," ","Add any initialization data to the CGP that should be included as part of the proposal"),(0,o.kt)("li",null," ","Announce forthcoming smart contract release on: https://forum.celo.org/c/governance"))),(0,o.kt)("li",null,"Commit audit fixes to the release branch"),(0,o.kt)("li",null,"Submit audit fixes to auditors for review."),(0,o.kt)("li",null,"Tag the first release candidate commit according to the"," ",(0,o.kt)("a",{href:"#During-the-release-proposal-stage"},"git release management instructions"),"."),(0,o.kt)("li",null,"Let the community know about the upcoming release proposal by posting details to the Governance category on https://forum.celo.org and cross post in the"," ",(0,o.kt)("a",{href:"https://discord.com/channels/600834479145353243/704805825373274134"},"Discord ",(0,o.kt)("code",null,"#governance")," channel."),"See the 'Communication guidelines' section below for information on what your post should contain.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"T+2w"),(0,o.kt)("td",null,(0,o.kt)("ol",null,(0,o.kt)("li",null,"On Tuesday: Run the"," ",(0,o.kt)("a",{href:"#release-process"},"smart contract release script")," ","in order to to deploy the contracts to Baklava as well as submit a governance proposal.",(0,o.kt)("ul",null,(0,o.kt)("li",null,"Transition proposal through Baklava"," ",(0,o.kt)("a",{href:"/celo-codebase/protocol/governance"}," ","governance process.")),(0,o.kt)("li",null,"Update your forum post with the Baklava ",(0,o.kt)("code",null,"PROPOSAL_ID"),", updated timings (if any changes), and notify the community in the Discord ",(0,o.kt)("code",null,"#governance")," channel.")))))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"T+3w"),(0,o.kt)("td",null,(0,o.kt)("ol",null,(0,o.kt)("li",null,"Confirm all contracts working as intended on Baklava."),(0,o.kt)("li",null,"Run the"," ",(0,o.kt)("a",{href:"#release-process"},"smart contract release script")," ","in order to to deploy the contracts to Alfajores as well as submit a governance proposal."),(0,o.kt)("li",null,"Update your forum post with the Alfajores ",(0,o.kt)("code",null,"PROPOSAL_ID"),", updated timings (if any changes), and notify the community in the Discord ",(0,o.kt)("code",null,"#governance")," channel.")))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"T+4w"),(0,o.kt)("td",null,(0,o.kt)("ol",null,(0,o.kt)("li",null,"Confirm all contracts working as intended on Alfajores."),(0,o.kt)("li",null,"Confirm audit is complete and make the release notes and forum post contain a link to it."),(0,o.kt)("li",null,"On Tuesday: Run the"," ",(0,o.kt)("a",{href:"https://docs.celo.org/community/release-process/smart-contracts#build-process"},"smart contract release script")," ","in order to to deploy the contracts to Mainnet as well as submit a governance proposal."),(0,o.kt)("li",null,"Update the corresponding governance proposal with the updated on-chain"," ",(0,o.kt)("code",null,"PROPOSAL_ID"),' and mark CGP status as "PROPOSED".'),(0,o.kt)("li",null,"Update your forum post with the Mainnet ",(0,o.kt)("code",null,"PROPOSAL_ID"),", updated timings (if any changes), and notify the community in the Discord ",(0,o.kt)("code",null,"#governance")," channel."),(0,o.kt)("li",null,"At this point all stakeholders are encouraged to"," ",(0,o.kt)("a",{href:"#verify-release-process"},"verify")," the proposed contracts deployed match the contracts from the release branch."),(0,o.kt)("li",null,"Monitor the progress of the proposal through the"," ",(0,o.kt)("a",{href:"/celo-codebase/protocol/governance"},"governance process."),(0,o.kt)("ul",null,(0,o.kt)("li",null,"Currently the governance process should take approximately 1 week: 24 hours for the dequeue process, 24 hours for the approval process, and 5 days for the referendum process. After which, the proposal is either declined or is ready to be executed within 3 days."),(0,o.kt)("li",null,"For updated timeframes, use the celocli:"," ",(0,o.kt)("code",null,"celocli network:parameters"))))))),(0,o.kt)("tr",null,(0,o.kt)("td",null,"T+5w"),(0,o.kt)("td",null,(0,o.kt)("ol",null,(0,o.kt)("li",null,"If the proposal passed:",(0,o.kt)("ol",null,(0,o.kt)("li",null,"Confirm all contracts working as intended on Mainnet."),(0,o.kt)("li",null,"Update your forum post with the Mainnet governance outcome (",(0,o.kt)("code",null,"Passed")," or ",(0,o.kt)("code",null,"Rejected"),") and notify the community in the Discord ",(0,o.kt)("code",null,"#governance")," channel."),(0,o.kt)("li",null,"Change corresponding CGP status to EXCECUTED."),(0,o.kt)("li",null,"Merge the release branch into ",(0,o.kt)("code",null,"master")," with a merge commit")),(0,o.kt)("li",null,"If the proposal failed:",(0,o.kt)("ol",null,(0,o.kt)("li",null,"Change corresponding CGP status to EXPIRED.")))))))),(0,o.kt)("p",null,"If the contents of the release (i.e. source Git commit) change at any point after the release has been tagged in Git, the process should increment the release identifier, and process should start again from the beginning. If the changes are small or do not introduce new code (e.g. reverting a contract to a previous version) the audit step may be accelerated."),(0,o.kt)("h3",{id:"communication-guidelines"},"Communication guidelines"),(0,o.kt)("p",null,"Communicating the upcoming governance proposal to the community is critical and may help getting it approved."),(0,o.kt)("p",null,"Each smart contract release governance proposal should be accompanied by a ",(0,o.kt)("a",{parentName:"p",href:"https://forum.celo.org/c/governance/"},"Governance category")," forum post that contains the following information:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Name of proposer (individual contributor or organization)."),(0,o.kt)("li",{parentName:"ul"},"Background information."),(0,o.kt)("li",{parentName:"ul"},"Link to the release on Github."),(0,o.kt)("li",{parentName:"ul"},"Link to the audit report(s)."),(0,o.kt)("li",{parentName:"ul"},"Anticipated timings for the Baklava and Alfajores testnets and Mainnet.")),(0,o.kt)("p",null,"It's recommended to post as early as possible and at minimum one week before the anticipated Baklava testnet governance proposal date."),(0,o.kt)("p",null,"Make sure to keep the post up to date. All updates (excluding fixing typos) should be communicated to the community in the ",(0,o.kt)("a",{parentName:"p",href:"http://chat.celo.org/"},"Discord")," ",(0,o.kt)("inlineCode",{parentName:"p"},"#governance")," channel."),(0,o.kt)("h3",{id:"emergency-patches-1"},"Emergency patches"),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Work in progress"))),(0,o.kt)("h2",{id:"vulnerability-disclosure"},"Vulnerability Disclosure"),(0,o.kt)("p",null,"Vulnerabilities in smart contract releases should be disclosed according to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/celo-org/celo-monorepo/blob/master/SECURITY.md"},"security policy"),"."),(0,o.kt)("h2",{id:"dependencies"},"Dependencies"),(0,o.kt)("p",null,"None"),(0,o.kt)("h2",{id:"dependents"},"Dependents"),(0,o.kt)("div",{className:"admonition admonition-warning alert alert--danger"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"warning")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Work in progress"))))}h.isMDXComponent=!0}}]);