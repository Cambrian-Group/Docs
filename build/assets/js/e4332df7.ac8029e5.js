"use strict";(self.webpackChunkcelo_docs=self.webpackChunkcelo_docs||[]).push([[8649],{3905:function(e,t,o){o.d(t,{Zo:function(){return d},kt:function(){return m}});var n=o(67294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function l(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function c(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)o=a[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var i=n.createContext({}),s=function(e){var t=n.useContext(i),o=t;return e&&(o="function"==typeof e?e(t):l(l({},t),e)),o},d=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(o),m=r,f=p["".concat(i,".").concat(m)]||p[m]||u[m]||a;return o?n.createElement(f,l(l({ref:t},d),{},{components:o})):n.createElement(f,l({ref:t},d))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=o.length,l=new Array(a);l[0]=p;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:r,l[1]=c;for(var s=2;s<a;s++)l[s]=o[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},12165:function(e,t,o){o.r(t),o.d(t,{frontMatter:function(){return c},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return d},default:function(){return p}});var n=o(83117),r=o(80102),a=(o(67294),o(3905)),l=["components"],c={},i="celocli election",s={unversionedId:"command-line-interface/election",id:"command-line-interface/election",title:"celocli election",description:"Participate in and view the state of Validator Elections",source:"@site/docs/command-line-interface/election.md",sourceDirName:"command-line-interface",slug:"/command-line-interface/election",permalink:"/command-line-interface/election",editUrl:"https://github.com/celo-org/docs/edit/main/docs/command-line-interface/election.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"celocli dkg",permalink:"/command-line-interface/dkg"},next:{title:"celocli exchange",permalink:"/command-line-interface/exchange"}},d=[{value:"<code>celocli election:activate</code>",id:"celocli-electionactivate",children:[],level:2},{value:"<code>celocli election:current</code>",id:"celocli-electioncurrent",children:[],level:2},{value:"<code>celocli election:list</code>",id:"celocli-electionlist",children:[],level:2},{value:"<code>celocli election:revoke</code>",id:"celocli-electionrevoke",children:[],level:2},{value:"<code>celocli election:run</code>",id:"celocli-electionrun",children:[],level:2},{value:"<code>celocli election:show ADDRESS</code>",id:"celocli-electionshow-address",children:[],level:2},{value:"<code>celocli election:vote</code>",id:"celocli-electionvote",children:[],level:2}],u={toc:d};function p(e){var t=e.components,o=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"celocli-election"},(0,a.kt)("inlineCode",{parentName:"h1"},"celocli election")),(0,a.kt)("p",null,"Participate in and view the state of Validator Elections"),(0,a.kt)("h2",{id:"celocli-electionactivate"},(0,a.kt)("inlineCode",{parentName:"h2"},"celocli election:activate")),(0,a.kt)("p",null,"Activate pending votes in validator elections to begin earning rewards. To earn rewards as a voter, it is required to activate your pending votes at some point after the end of the epoch in which they were made."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Activate pending votes in validator elections to begin earning rewards. To earn rewards as a voter, it is required to activate your pending votes at some point after the end of the epoch in which they were made.\n\nUSAGE\n  $ celocli election:activate\n\nOPTIONS\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Voter's address\n  --globalHelp                                       View all available global flags\n\n  --wait                                             Wait until all pending votes can be\n                                                     activated\n\nEXAMPLES\n  activate --from 0x4443d0349e8b3075cba511a0a87796597602a0f1\n\n  activate --from 0x4443d0349e8b3075cba511a0a87796597602a0f1 --wait\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/election/activate.ts"},"src/commands/election/activate.ts"))),(0,a.kt)("h2",{id:"celocli-electioncurrent"},(0,a.kt)("inlineCode",{parentName:"h2"},"celocli election:current")),(0,a.kt)("p",null,"Outputs the set of validators currently participating in BFT to create blocks. An election is run to select the validator set at the end of every epoch."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Outputs the set of validators currently participating in BFT to create blocks. An election is run to select the validator set at the end of every epoch.\n\nUSAGE\n  $ celocli election:current\n\nOPTIONS\n  -x, --extended          show extra columns\n  --columns=columns       only show provided columns (comma-separated)\n  --csv                   output is csv format [alias: --output=csv]\n  --filter=filter         filter property by partial string matching, ex: name=foo\n  --globalHelp            View all available global flags\n  --no-header             hide table header from output\n  --no-truncate           do not truncate output to fit screen\n  --output=csv|json|yaml  output in a more machine friendly format\n  --sort=sort             property to sort by (prepend '-' for descending)\n\n  --valset                Show currently used signers from valset (by default the\n                          authorized validator signers are shown). Useful for checking\n                          if keys have been rotated.\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/election/current.ts"},"src/commands/election/current.ts"))),(0,a.kt)("h2",{id:"celocli-electionlist"},(0,a.kt)("inlineCode",{parentName:"h2"},"celocli election:list")),(0,a.kt)("p",null,"Prints the list of validator groups, the number of votes they have received, the number of additional votes they are able to receive, and whether or not they are eligible to elect validators."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Prints the list of validator groups, the number of votes they have received, the number of additional votes they are able to receive, and whether or not they are eligible to elect validators.\n\nUSAGE\n  $ celocli election:list\n\nOPTIONS\n  -x, --extended          show extra columns\n  --columns=columns       only show provided columns (comma-separated)\n  --csv                   output is csv format [alias: --output=csv]\n  --filter=filter         filter property by partial string matching, ex: name=foo\n  --globalHelp            View all available global flags\n  --no-header             hide table header from output\n  --no-truncate           do not truncate output to fit screen\n  --output=csv|json|yaml  output in a more machine friendly format\n  --sort=sort             property to sort by (prepend '-' for descending)\n\nEXAMPLE\n  list\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/election/list.ts"},"src/commands/election/list.ts"))),(0,a.kt)("h2",{id:"celocli-electionrevoke"},(0,a.kt)("inlineCode",{parentName:"h2"},"celocli election:revoke")),(0,a.kt)("p",null,"Revoke votes for a Validator Group in validator elections."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Revoke votes for a Validator Group in validator elections.\n\nUSAGE\n  $ celocli election:revoke\n\nOPTIONS\n  --for=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d   (required) ValidatorGroup's address\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Voter's address\n  --globalHelp                                       View all available global flags\n  --value=value                                      (required) Value of votes to revoke\n\nEXAMPLE\n  revoke --from 0x4443d0349e8b3075cba511a0a87796597602a0f1 --for\n  0x932fee04521f5fcb21949041bf161917da3f588b, --value 1000000\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/election/revoke.ts"},"src/commands/election/revoke.ts"))),(0,a.kt)("h2",{id:"celocli-electionrun"},(0,a.kt)("inlineCode",{parentName:"h2"},"celocli election:run")),(0,a.kt)("p",null,'Runs a "mock" election and prints out the validators that would be elected if the epoch ended right now.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Runs a \"mock\" election and prints out the validators that would be elected if the epoch ended right now.\n\nUSAGE\n  $ celocli election:run\n\nOPTIONS\n  -x, --extended          show extra columns\n  --columns=columns       only show provided columns (comma-separated)\n  --csv                   output is csv format [alias: --output=csv]\n  --filter=filter         filter property by partial string matching, ex: name=foo\n  --globalHelp            View all available global flags\n  --no-header             hide table header from output\n  --no-truncate           do not truncate output to fit screen\n  --output=csv|json|yaml  output in a more machine friendly format\n  --sort=sort             property to sort by (prepend '-' for descending)\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/election/run.ts"},"src/commands/election/run.ts"))),(0,a.kt)("h2",{id:"celocli-electionshow-address"},(0,a.kt)("inlineCode",{parentName:"h2"},"celocli election:show ADDRESS")),(0,a.kt)("p",null,"Show election information about a voter or registered Validator Group"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Show election information about a voter or registered Validator Group\n\nUSAGE\n  $ celocli election:show ADDRESS\n\nARGUMENTS\n  ADDRESS  Voter or Validator Groups's address\n\nOPTIONS\n  --globalHelp  View all available global flags\n  --group       Show information about a group running in Validator elections\n  --voter       Show information about an account voting in Validator elections\n\nEXAMPLES\n  show 0x97f7333c51897469E8D98E7af8653aAb468050a3 --voter\n\n  show 0x97f7333c51897469E8D98E7af8653aAb468050a3 --group\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/election/show.ts"},"src/commands/election/show.ts"))),(0,a.kt)("h2",{id:"celocli-electionvote"},(0,a.kt)("inlineCode",{parentName:"h2"},"celocli election:vote")),(0,a.kt)("p",null,"Vote for a Validator Group in validator elections."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Vote for a Validator Group in validator elections.\n\nUSAGE\n  $ celocli election:vote\n\nOPTIONS\n  --for=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d   (required) ValidatorGroup's address\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Voter's address\n  --globalHelp                                       View all available global flags\n\n  --value=value                                      (required) Amount of Gold used to\n                                                     vote for group\n\nEXAMPLE\n  vote --from 0x4443d0349e8b3075cba511a0a87796597602a0f1 --for\n  0x932fee04521f5fcb21949041bf161917da3f588b, --value 1000000\n")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"See code: ",(0,a.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/election/vote.ts"},"src/commands/election/vote.ts"))))}p.isMDXComponent=!0}}]);