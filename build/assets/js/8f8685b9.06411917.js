"use strict";(self.webpackChunkcelo_docs=self.webpackChunkcelo_docs||[]).push([[9200],{3905:function(e,a,n){n.d(a,{Zo:function(){return d},kt:function(){return p}});var t=n(67294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function c(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function l(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?c(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function r(e,a){if(null==e)return{};var n,t,o=function(e,a){if(null==e)return{};var n,t,o={},c=Object.keys(e);for(t=0;t<c.length;t++)n=c[t],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(t=0;t<c.length;t++)n=c[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=t.createContext({}),s=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):l(l({},a),e)),n},d=function(e){var a=s(e.components);return t.createElement(i.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},u=t.forwardRef((function(e,a){var n=e.components,o=e.mdxType,c=e.originalType,i=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=s(n),p=o,h=u["".concat(i,".").concat(p)]||u[p]||m[p]||c;return n?t.createElement(h,l(l({ref:a},d),{},{components:n})):t.createElement(h,l({ref:a},d))}));function p(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var c=n.length,l=new Array(c);l[0]=u;var r={};for(var i in a)hasOwnProperty.call(a,i)&&(r[i]=a[i]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var s=2;s<c;s++)l[s]=n[s];return t.createElement.apply(null,l)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},94388:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return r},contentTitle:function(){return i},metadata:function(){return s},toc:function(){return d},default:function(){return u}});var t=n(83117),o=n(80102),c=(n(67294),n(3905)),l=["components"],r={},i="celocli account",s={unversionedId:"command-line-interface/account",id:"command-line-interface/account",title:"celocli account",description:"Manage your account, keys, and metadata",source:"@site/docs/command-line-interface/account.md",sourceDirName:"command-line-interface",slug:"/command-line-interface/account",permalink:"/command-line-interface/account",editUrl:"https://github.com/celo-org/docs/edit/main/docs/command-line-interface/account.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Celo CLI",permalink:"/command-line-interface/introduction"},next:{title:"celocli autocomplete",permalink:"/command-line-interface/autocomplete"}},d=[{value:"<code>celocli account:authorize</code>",id:"celocli-accountauthorize",children:[],level:2},{value:"<code>celocli account:balance ADDRESS</code>",id:"celocli-accountbalance-address",children:[],level:2},{value:"<code>celocli account:claim-account FILE</code>",id:"celocli-accountclaim-account-file",children:[],level:2},{value:"<code>celocli account:claim-attestation-service-url FILE</code>",id:"celocli-accountclaim-attestation-service-url-file",children:[],level:2},{value:"<code>celocli account:claim-domain FILE</code>",id:"celocli-accountclaim-domain-file",children:[],level:2},{value:"<code>celocli account:claim-keybase FILE</code>",id:"celocli-accountclaim-keybase-file",children:[],level:2},{value:"<code>celocli account:claim-name FILE</code>",id:"celocli-accountclaim-name-file",children:[],level:2},{value:"<code>celocli account:claim-storage FILE</code>",id:"celocli-accountclaim-storage-file",children:[],level:2},{value:"<code>celocli account:create-metadata FILE</code>",id:"celocli-accountcreate-metadata-file",children:[],level:2},{value:"<code>celocli account:get-metadata ADDRESS</code>",id:"celocli-accountget-metadata-address",children:[],level:2},{value:"<code>celocli account:list</code>",id:"celocli-accountlist",children:[],level:2},{value:"<code>celocli account:lock ACCOUNT</code>",id:"celocli-accountlock-account",children:[],level:2},{value:"<code>celocli account:new</code>",id:"celocli-accountnew",children:[],level:2},{value:"<code>celocli account:offchain-read ADDRESS</code>",id:"celocli-accountoffchain-read-address",children:[],level:2},{value:"<code>celocli account:offchain-write</code>",id:"celocli-accountoffchain-write",children:[],level:2},{value:"<code>celocli account:proof-of-possession</code>",id:"celocli-accountproof-of-possession",children:[],level:2},{value:"<code>celocli account:recover-old</code>",id:"celocli-accountrecover-old",children:[],level:2},{value:"<code>celocli account:register</code>",id:"celocli-accountregister",children:[],level:2},{value:"<code>celocli account:register-data-encryption-key</code>",id:"celocli-accountregister-data-encryption-key",children:[],level:2},{value:"<code>celocli account:register-metadata</code>",id:"celocli-accountregister-metadata",children:[],level:2},{value:"<code>celocli account:set-name</code>",id:"celocli-accountset-name",children:[],level:2},{value:"<code>celocli account:set-wallet</code>",id:"celocli-accountset-wallet",children:[],level:2},{value:"<code>celocli account:show ADDRESS</code>",id:"celocli-accountshow-address",children:[],level:2},{value:"<code>celocli account:show-claimed-accounts ADDRESS</code>",id:"celocli-accountshow-claimed-accounts-address",children:[],level:2},{value:"<code>celocli account:show-metadata FILE</code>",id:"celocli-accountshow-metadata-file",children:[],level:2},{value:"<code>celocli account:unlock ACCOUNT</code>",id:"celocli-accountunlock-account",children:[],level:2},{value:"<code>celocli account:verify-proof-of-possession</code>",id:"celocli-accountverify-proof-of-possession",children:[],level:2}],m={toc:d};function u(e){var a=e.components,n=(0,o.Z)(e,l);return(0,c.kt)("wrapper",(0,t.Z)({},m,n,{components:a,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"celocli-account"},(0,c.kt)("inlineCode",{parentName:"h1"},"celocli account")),(0,c.kt)("p",null,"Manage your account, keys, and metadata"),(0,c.kt)("h2",{id:"celocli-accountauthorize"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:authorize")),(0,c.kt)("p",null,'Keep your locked Gold more secure by authorizing alternative keys to be used for signing attestations, voting, or validating. By doing so, you can continue to participate in the protocol while keeping the key with access to your locked Gold in cold storage. You must include a "proof-of-possession" of the key being authorized, which can be generated with the "account:proof-of-possession" command.'),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'Keep your locked Gold more secure by authorizing alternative keys to be used for signing attestations, voting, or validating. By doing so, you can continue to participate in the protocol while keeping the key with access to your locked Gold in cold storage. You must include a "proof-of-possession" of the key being authorized, which can be generated with the "account:proof-of-possession" command.\n\nUSAGE\n  $ celocli account:authorize\n\nOPTIONS\n  -r, --role=vote|validator|attestation                (required) Role to delegate\n\n  --blsKey=0x                                          The BLS public key that the\n                                                       validator is using for consensus,\n                                                       should pass proof of possession.\n                                                       96 bytes.\n\n  --blsPop=0x                                          The BLS public key\n                                                       proof-of-possession, which\n                                                       consists of a signature on the\n                                                       account address. 48 bytes.\n\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d    (required) Account Address\n\n  --globalHelp                                         View all available global flags\n\n  --signature=0x                                       (required) Signature (a.k.a\n                                                       proof-of-possession) of the\n                                                       signer key\n\n  --signer=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Account Address\n\nEXAMPLES\n  authorize --from 0x5409ED021D9299bf6814279A6A1411A7e866A631 --role vote --signer\n  0x6ecbe1db9ef729cbe972c83fb886247691fb6beb --signature\n  0x1b9fca4bbb5bfb1dbe69ef1cddbd9b4202dcb6b134c5170611e1e36ecfa468d7b46c85328d504934fce6\n  c2a1571603a50ae224d2b32685e84d4d1a1eebad8452eb\n\n  authorize --from 0x5409ED021D9299bf6814279A6A1411A7e866A631 --role validator --signer\n  0x6ecbe1db9ef729cbe972c83fb886247691fb6beb --signature\n  0x1b9fca4bbb5bfb1dbe69ef1cddbd9b4202dcb6b134c5170611e1e36ecfa468d7b46c85328d504934fce6\n  c2a1571603a50ae224d2b32685e84d4d1a1eebad8452eb --blsKey\n  0x4fa3f67fc913878b068d1fa1cdddc54913d3bf988dbe5a36a20fa888f20d4894c408a6773f3d7bde1115\n  4f2a3076b700d345a42fd25a0e5e83f4db5586ac7979ac2053cd95d8f2efd3e959571ceccaa743e02cf4be\n  3f5d7aaddb0b06fc9aff00 --blsPop\n  0xcdb77255037eb68897cd487fdd85388cbda448f617f874449d4b11588b0b7ad8ddc20d9bb450b513bb35\n  664ea3923900\n')),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/authorize.ts"},"src/commands/account/authorize.ts"))),(0,c.kt)("h2",{id:"celocli-accountbalance-address"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:balance ADDRESS")),(0,c.kt)("p",null,"View Celo Stables and CELO balances for an address"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"View Celo Stables and CELO balances for an address\n\nUSAGE\n  $ celocli account:balance ADDRESS\n\nOPTIONS\n  --erc20Address=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  Address of generic ERC-20\n                                                             token to also check balance\n                                                             for\n\n  --globalHelp                                               View all available global\n                                                             flags\n\nEXAMPLES\n  balance 0x5409ed021d9299bf6814279a6a1411a7e866a631\n\n  balance 0x5409ed021d9299bf6814279a6a1411a7e866a631 --erc20Address\n  0x765DE816845861e75A25fCA122bb6898B8B1282a\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/balance.ts"},"src/commands/account/balance.ts"))),(0,c.kt)("h2",{id:"celocli-accountclaim-account-file"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:claim-account FILE")),(0,c.kt)("p",null,"Claim another account, and optionally its public key, and add the claim to a local metadata file"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Claim another account, and optionally its public key, and add the claim to a local metadata file\n\nUSAGE\n  $ celocli account:claim-account FILE\n\nARGUMENTS\n  FILE  Path of the metadata file\n\nOPTIONS\n  --address=address                                  (required) The address of the\n                                                     account you want to claim\n\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the account\n                                                     to set metadata for or an\n                                                     authorized signer for the address\n                                                     in the metadata\n\n  --globalHelp                                       View all available global flags\n\n  --publicKey=publicKey                              The public key of the account that\n                                                     others may use to send you\n                                                     encrypted messages\n\nEXAMPLE\n  claim-account ~/metadata.json --address 0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d\n  --from 0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/claim-account.ts"},"src/commands/account/claim-account.ts"))),(0,c.kt)("h2",{id:"celocli-accountclaim-attestation-service-url-file"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:claim-attestation-service-url FILE")),(0,c.kt)("p",null,"Claim the URL of the attestation service and add the claim to a local metadata file"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Claim the URL of the attestation service and add the claim to a local metadata file\n\nUSAGE\n  $ celocli account:claim-attestation-service-url FILE\n\nARGUMENTS\n  FILE  Path of the metadata file\n\nOPTIONS\n  --force                                            Ignore URL validity checks\n\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the account\n                                                     to set metadata for or an\n                                                     authorized signer for the address\n                                                     in the metadata\n\n  --globalHelp                                       View all available global flags\n\n  --url=https://www.celo.org                         (required) The URL you want to\n                                                     claim. Should begin http://\n\nEXAMPLE\n  claim-attestation-service-url ~/metadata.json --url https://test.com/myurl --from\n  0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/claim-attestation-service-url.ts"},"src/commands/account/claim-attestation-service-url.ts"))),(0,c.kt)("h2",{id:"celocli-accountclaim-domain-file"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:claim-domain FILE")),(0,c.kt)("p",null,"Claim a domain and add the claim to a local metadata file"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Claim a domain and add the claim to a local metadata file\n\nUSAGE\n  $ celocli account:claim-domain FILE\n\nARGUMENTS\n  FILE  Path of the metadata file\n\nOPTIONS\n  --domain=domain                                    (required) The domain you want to\n                                                     claim\n\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the account\n                                                     to set metadata for or an\n                                                     authorized signer for the address\n                                                     in the metadata\n\n  --globalHelp                                       View all available global flags\n\nEXAMPLE\n  claim-domain ~/metadata.json --domain test.com --from\n  0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/claim-domain.ts"},"src/commands/account/claim-domain.ts"))),(0,c.kt)("h2",{id:"celocli-accountclaim-keybase-file"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:claim-keybase FILE")),(0,c.kt)("p",null,"Claim a keybase username and add the claim to a local metadata file"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Claim a keybase username and add the claim to a local metadata file\n\nUSAGE\n  $ celocli account:claim-keybase FILE\n\nARGUMENTS\n  FILE  Path of the metadata file\n\nOPTIONS\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the account\n                                                     to set metadata for or an\n                                                     authorized signer for the address\n                                                     in the metadata\n\n  --globalHelp                                       View all available global flags\n\n  --username=username                                (required) The keybase username you\n                                                     want to claim\n\nEXAMPLE\n  claim-keybase ~/metadata.json --from 0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95\n  --username myusername\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/claim-keybase.ts"},"src/commands/account/claim-keybase.ts"))),(0,c.kt)("h2",{id:"celocli-accountclaim-name-file"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:claim-name FILE")),(0,c.kt)("p",null,"Claim a name and add the claim to a local metadata file"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Claim a name and add the claim to a local metadata file\n\nUSAGE\n  $ celocli account:claim-name FILE\n\nARGUMENTS\n  FILE  Path of the metadata file\n\nOPTIONS\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the account\n                                                     to set metadata for or an\n                                                     authorized signer for the address\n                                                     in the metadata\n\n  --globalHelp                                       View all available global flags\n\n  --name=name                                        (required) The name you want to\n                                                     claim\n\nEXAMPLE\n  claim-name ~/metadata.json --from 0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95 --name\n  myname\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/claim-name.ts"},"src/commands/account/claim-name.ts"))),(0,c.kt)("h2",{id:"celocli-accountclaim-storage-file"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:claim-storage FILE")),(0,c.kt)("p",null,"Claim a storage root and add the claim to a local metadata file"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Claim a storage root and add the claim to a local metadata file\n\nUSAGE\n  $ celocli account:claim-storage FILE\n\nARGUMENTS\n  FILE  Path of the metadata file\n\nOPTIONS\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the account\n                                                     to set metadata for or an\n                                                     authorized signer for the address\n                                                     in the metadata\n\n  --globalHelp                                       View all available global flags\n\n  --url=https://www.celo.org                         (required) The URL of the storage\n                                                     root you want to claim\n\nEXAMPLE\n  claim-storage ~/metadata.json --url http://test.com/myurl --from\n  0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/claim-storage.ts"},"src/commands/account/claim-storage.ts"))),(0,c.kt)("h2",{id:"celocli-accountcreate-metadata-file"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:create-metadata FILE")),(0,c.kt)("p",null,"Create an empty identity metadata file. Use this metadata file to store claims attesting to ownership of off-chain resources. Claims can be generated with the account:claim-","*"," commands."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Create an empty identity metadata file. Use this metadata file to store claims attesting to ownership of off-chain resources. Claims can be generated with the account:claim-* commands.\n\nUSAGE\n  $ celocli account:create-metadata FILE\n\nARGUMENTS\n  FILE  Path where the metadata should be saved\n\nOPTIONS\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the account\n                                                     to set metadata for or an\n                                                     authorized signer for the address\n                                                     in the metadata\n\n  --globalHelp                                       View all available global flags\n\nEXAMPLE\n  create-metadata ~/metadata.json --from 0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/create-metadata.ts"},"src/commands/account/create-metadata.ts"))),(0,c.kt)("h2",{id:"celocli-accountget-metadata-address"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:get-metadata ADDRESS")),(0,c.kt)("p",null,"Show information about an address. Retreives the metadata URL for an account from the on-chain, then fetches the metadata file off-chain and verifies proofs as able."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Show information about an address. Retreives the metadata URL for an account from the on-chain, then fetches the metadata file off-chain and verifies proofs as able.\n\nUSAGE\n  $ celocli account:get-metadata ADDRESS\n\nARGUMENTS\n  ADDRESS  Address to get metadata for\n\nOPTIONS\n  -x, --extended          show extra columns\n  --columns=columns       only show provided columns (comma-separated)\n  --csv                   output is csv format [alias: --output=csv]\n  --filter=filter         filter property by partial string matching, ex: name=foo\n  --globalHelp            View all available global flags\n  --no-header             hide table header from output\n  --no-truncate           do not truncate output to fit screen\n  --output=csv|json|yaml  output in a more machine friendly format\n  --sort=sort             property to sort by (prepend '-' for descending)\n\nEXAMPLE\n  get-metadata 0x97f7333c51897469E8D98E7af8653aAb468050a3\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/get-metadata.ts"},"src/commands/account/get-metadata.ts"))),(0,c.kt)("h2",{id:"celocli-accountlist"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:list")),(0,c.kt)("p",null,"List the addresses from the node and the local instance"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"List the addresses from the node and the local instance\n\nUSAGE\n  $ celocli account:list\n\nOPTIONS\n  --globalHelp  View all available global flags\n\n  --local       If set, only show local and hardware wallet accounts. Use no-local to\n                only show keystore addresses.\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/list.ts"},"src/commands/account/list.ts"))),(0,c.kt)("h2",{id:"celocli-accountlock-account"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:lock ACCOUNT")),(0,c.kt)("p",null,"Lock an account which was previously unlocked"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Lock an account which was previously unlocked\n\nUSAGE\n  $ celocli account:lock ACCOUNT\n\nARGUMENTS\n  ACCOUNT  Account address\n\nOPTIONS\n  --globalHelp  View all available global flags\n\nEXAMPLE\n  lock 0x5409ed021d9299bf6814279a6a1411a7e866a631\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/lock.ts"},"src/commands/account/lock.ts"))),(0,c.kt)("h2",{id:"celocli-accountnew"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:new")),(0,c.kt)("p",null,"Creates a new account locally using the Celo Derivation Path (m/44'/52752'/0/changeIndex/addressIndex) and print out the key information. Save this information for local transaction signing or import into a Celo node. Ledger: this command has been tested swapping mnemonics with the Ledger successfully (only supports english)"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Creates a new account locally using the Celo Derivation Path (m/44'/52752'/0/changeIndex/addressIndex) and print out the key information. Save this information for local transaction signing or import into a Celo node. Ledger: this command has been tested swapping mnemonics with the Ledger successfully (only supports english)\n\nUSAGE\n  $ celocli account:new\n\nOPTIONS\n  --addressIndex=addressIndex\n      Choose the address index for the derivation path\n\n  --changeIndex=changeIndex\n      Choose the change index for the derivation path\n\n  --derivationPath=derivationPath\n      Choose a different derivation Path (Celo's default is \"m/44'/52752'/0'\"). Use \"eth\"\n      as an alias of the Ethereum derivation path (\"m/44'/60'/0'\"). Recreating the same\n      account requires knowledge of the mnemonic, passphrase (if any), and the derivation\n      path\n\n  --globalHelp\n      View all available global flags\n\n  --language=chinese_simplified|chinese_traditional|english|french|italian|japanese|kore\n  an|spanish\n      [default: english] Language for the mnemonic words. **WARNING**, some hardware\n      wallets don't support other languages\n\n  --mnemonicPath=mnemonicPath\n      Instead of generating a new mnemonic (seed phrase), use the user-supplied mnemonic\n      instead. Path to a file that contains all the mnemonic words separated by a space\n      (example: \"word1 word2 word3 ... word24\"). If the words are a language other than\n      English, the --language flag must be used. Only BIP39 mnemonics are supported\n\n  --passphrasePath=passphrasePath\n      Path to a file that contains the BIP39 passphrase to combine with the mnemonic\n      specified using the mnemonicPath flag and the index specified using the addressIndex\n      flag. Every passphrase generates a different private key and wallet address.\n\nEXAMPLES\n  new\n\n  new --passphrasePath myFolder/my_passphrase_file\n\n  new --language spanish\n\n  new --passphrasePath some_folder/my_passphrase_file --language japanese --addressIndex\n  5\n\n  new --passphrasePath some_folder/my_passphrase_file --mnemonicPath\n  some_folder/my_mnemonic_file --addressIndex 5\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/new.ts"},"src/commands/account/new.ts"))),(0,c.kt)("h2",{id:"celocli-accountoffchain-read-address"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:offchain-read ADDRESS")),(0,c.kt)("p",null,"DEV: Reads the name from offchain storage"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"DEV: Reads the name from offchain storage\n\nUSAGE\n  $ celocli account:offchain-read ADDRESS\n\nOPTIONS\n  --bucket=bucket                                    If using a GCP or AWS storage\n                                                     bucket this parameter is required\n\n  --directory=directory                              [default: .] To which directory\n                                                     data should be written\n\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  Account Address\n\n  --globalHelp                                       View all available global flags\n\n  --privateDEK=privateDEK\n\n  --provider=(git|aws|gcp)                           If the CLI should attempt to push\n                                                     to the cloud\n\nEXAMPLES\n  offchain-read 0x...\n\n  offchain-read 0x... --from 0x... --privateKey 0x...\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/offchain-read.ts"},"src/commands/account/offchain-read.ts"))),(0,c.kt)("h2",{id:"celocli-accountoffchain-write"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:offchain-write")),(0,c.kt)("p",null,"DEV: Writes a name to offchain storage"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"DEV: Writes a name to offchain storage\n\nUSAGE\n  $ celocli account:offchain-write\n\nOPTIONS\n  --bucket=bucket           If using a GCP or AWS storage bucket this parameter is\n                            required\n\n  --directory=directory     [default: .] To which directory data should be written\n\n  --encryptTo=encryptTo\n\n  --globalHelp              View all available global flags\n\n  --name=name               (required)\n\n  --privateDEK=privateDEK\n\n  --privateKey=privateKey   (required)\n\n  --provider=(git|aws|gcp)  If the CLI should attempt to push to the cloud\n\nEXAMPLES\n  offchain-write --name test-account --privateKey 0x...\n\n  offchain-write --name test-account --privateKey 0x...  privateDEK 0x... --encryptTo\n  0x...\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/offchain-write.ts"},"src/commands/account/offchain-write.ts"))),(0,c.kt)("h2",{id:"celocli-accountproof-of-possession"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:proof-of-possession")),(0,c.kt)("p",null,'Generate proof-of-possession to be used to authorize a signer. See the "account:authorize" command for more details.'),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'Generate proof-of-possession to be used to authorize a signer. See the "account:authorize" command for more details.\n\nUSAGE\n  $ celocli account:proof-of-possession\n\nOPTIONS\n  --account=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the\n                                                        account that needs to prove\n                                                        possession of the signer key.\n\n  --globalHelp                                          View all available global flags\n\n  --signer=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d   (required) Address of the signer\n                                                        key to prove possession of.\n\nEXAMPLE\n  proof-of-possession --account 0x5409ed021d9299bf6814279a6a1411a7e866a631 --signer\n  0x6ecbe1db9ef729cbe972c83fb886247691fb6beb\n')),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/proof-of-possession.ts"},"src/commands/account/proof-of-possession.ts"))),(0,c.kt)("h2",{id:"celocli-accountrecover-old"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:recover-old")),(0,c.kt)("p",null,"Recovers the Valora old account and print out the key information. The old Valora app (in a beta state) generated the user address using a seed of 32 bytes, instead of 64 bytes. As the app fixed that, some old accounts were left with some funds. This command allows the user to recover those funds."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Recovers the Valora old account and print out the key information. The old Valora app (in a beta state) generated the user address using a seed of 32 bytes, instead of 64 bytes. As the app fixed that, some old accounts were left with some funds. This command allows the user to recover those funds.\n\nUSAGE\n  $ celocli account:recover-old\n\nOPTIONS\n  --addressIndex=addressIndex\n      Choose the address index for the derivation path\n\n  --changeIndex=changeIndex\n      Choose the change index for the derivation path\n\n  --derivationPath=derivationPath\n      Choose a different derivation Path (Celo's default is \"m/44'/52752'/0'\"). Use \"eth\"\n      as an alias of the Ethereum derivation path (\"m/44'/60'/0'\"). Recreating the same\n      account requires knowledge of the mnemonic, passphrase (if any), and the derivation\n      path\n\n  --globalHelp\n      View all available global flags\n\n  --language=chinese_simplified|chinese_traditional|english|french|italian|japanese|kore\n  an|spanish\n      [default: english] Language for the mnemonic words. **WARNING**, some hardware\n      wallets don't support other languages\n\n  --mnemonicPath=mnemonicPath\n      (required) Path to a file that contains all the mnemonic words separated by a space\n      (example: \"word1 word2 word3 ... word24\"). If the words are a language other than\n      English, the --language flag must be used. Only BIP39 mnemonics are supported\n\n  --passphrasePath=passphrasePath\n      Path to a file that contains the BIP39 passphrase to combine with the mnemonic\n      specified using the mnemonicPath flag and the index specified using the addressIndex\n      flag. Every passphrase generates a different private key and wallet address.\n\nEXAMPLES\n  recover-old --mnemonicPath some_folder/my_mnemonic_file\n\n  recover-old --mnemonicPath some_folder/my_mnemonic_file --passphrasePath\n  myFolder/my_passphrase_file\n\n  recover-old --mnemonicPath some_folder/my_mnemonic_file --language spanish\n\n  recover-old --mnemonicPath some_folder/my_mnemonic_file --passphrasePath\n  some_folder/my_passphrase_file --language japanese --addressIndex 5\n\n  recover-old --mnemonicPath some_folder/my_mnemonic_file --passphrasePath\n  some_folder/my_passphrase_file --addressIndex 5\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/recover-old.ts"},"src/commands/account/recover-old.ts"))),(0,c.kt)("h2",{id:"celocli-accountregister"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:register")),(0,c.kt)("p",null,"Register an account on-chain. This allows you to lock Gold, which is a pre-requisite for registering a Validator or Group, participating in Validator elections and on-chain Governance, and earning epoch rewards."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Register an account on-chain. This allows you to lock Gold, which is a pre-requisite for registering a Validator or Group, participating in Validator elections and on-chain Governance, and earning epoch rewards.\n\nUSAGE\n  $ celocli account:register\n\nOPTIONS\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Account Address\n  --globalHelp                                       View all available global flags\n  --name=name\n\nEXAMPLES\n  register --from 0x5409ed021d9299bf6814279a6a1411a7e866a631\n\n  register --from 0x5409ed021d9299bf6814279a6a1411a7e866a631 --name test-account\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/register.ts"},"src/commands/account/register.ts"))),(0,c.kt)("h2",{id:"celocli-accountregister-data-encryption-key"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:register-data-encryption-key")),(0,c.kt)("p",null,"Register a data encryption key for an account on chain. This key can be used to encrypt data to you such as offchain metadata or transaction comments"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Register a data encryption key for an account on chain. This key can be used to encrypt data to you such as offchain metadata or transaction comments\n\nUSAGE\n  $ celocli account:register-data-encryption-key\n\nOPTIONS\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Addess of the account to\n                                                     set the data encryption key for\n\n  --globalHelp                                       View all available global flags\n\n  --publicKey=publicKey                              (required) The public key you want\n                                                     to register\n\nEXAMPLE\n  register-data-encryption-key --publicKey 0x...  --from\n  0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/register-data-encryption-key.ts"},"src/commands/account/register-data-encryption-key.ts"))),(0,c.kt)("h2",{id:"celocli-accountregister-metadata"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:register-metadata")),(0,c.kt)("p",null,"Register metadata URL for an account where users will be able to retieve the metadata file and verify your claims"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Register metadata URL for an account where users will be able to retieve the metadata file and verify your claims\n\nUSAGE\n  $ celocli account:register-metadata\n\nOPTIONS\n  -x, --extended                                     show extra columns\n\n  --columns=columns                                  only show provided columns\n                                                     (comma-separated)\n\n  --csv                                              output is csv format [alias:\n                                                     --output=csv]\n\n  --filter=filter                                    filter property by partial string\n                                                     matching, ex: name=foo\n\n  --force                                            Ignore metadata validity checks\n\n  --from=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Addess of the account to\n                                                     set metadata for\n\n  --globalHelp                                       View all available global flags\n\n  --no-header                                        hide table header from output\n\n  --no-truncate                                      do not truncate output to fit\n                                                     screen\n\n  --output=csv|json|yaml                             output in a more machine friendly\n                                                     format\n\n  --sort=sort                                        property to sort by (prepend '-'\n                                                     for descending)\n\n  --url=https://www.celo.org                         (required) The url to the metadata\n                                                     you want to register\n\nEXAMPLE\n  register-metadata --url https://www.mywebsite.com/celo-metadata --from\n  0x47e172F6CfB6c7D01C1574fa3E2Be7CC73269D95\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/register-metadata.ts"},"src/commands/account/register-metadata.ts"))),(0,c.kt)("h2",{id:"celocli-accountset-name"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:set-name")),(0,c.kt)("p",null,"Sets the name of a registered account on-chain. An account's name is an optional human readable identifier"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Sets the name of a registered account on-chain. An account's name is an optional human readable identifier\n\nUSAGE\n  $ celocli account:set-name\n\nOPTIONS\n  --account=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Account Address\n  --globalHelp                                          View all available global flags\n  --name=name                                           (required)\n\nEXAMPLE\n  set-name --account 0x5409ed021d9299bf6814279a6a1411a7e866a631 --name test-account\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/set-name.ts"},"src/commands/account/set-name.ts"))),(0,c.kt)("h2",{id:"celocli-accountset-wallet"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:set-wallet")),(0,c.kt)("p",null,"Sets the wallet of a registered account on-chain. An account's wallet is an optional wallet associated with an account. Can be set by the account or an account's signer."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Sets the wallet of a registered account on-chain. An account's wallet is an optional wallet associated with an account. Can be set by the account or an account's signer.\n\nUSAGE\n  $ celocli account:set-wallet\n\nOPTIONS\n  --account=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Account Address\n  --globalHelp                                          View all available global flags\n\n  --signature=0x                                        Signature (a.k.a.\n                                                        proof-of-possession) of the\n                                                        signer key\n\n  --signer=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d   Address of the signer key to\n                                                        verify proof of possession.\n\n  --wallet=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d   (required) Account Address\n\nEXAMPLES\n  set-wallet --account 0x5409ed021d9299bf6814279a6a1411a7e866a631 --wallet\n  0x5409ed021d9299bf6814279a6a1411a7e866a631\n\n  set-wallet --account 0x5409ed021d9299bf6814279a6a1411a7e866a631 --wallet\n  0x5409ed021d9299bf6814279a6a1411a7e866a631 --signer\n  0x0EdeDF7B1287f07db348997663EeEb283D70aBE7 --signature\n  0x1c5efaa1f7ca6484d49ccce76217e2fba0552c0b23462cff7ba646473bc2717ffc4ce45be89bd5be9b5d\n  23305e87fc2896808467c4081d9524a84c01b89ec91ca3\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/set-wallet.ts"},"src/commands/account/set-wallet.ts"))),(0,c.kt)("h2",{id:"celocli-accountshow-address"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:show ADDRESS")),(0,c.kt)("p",null,"Show information for an account, including name, authorized vote, validator, and attestation signers, the URL at which account metadata is hosted, the address the account is using with the mobile wallet, and a public key that can be used to encrypt information for the account."),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Show information for an account, including name, authorized vote, validator, and attestation signers, the URL at which account metadata is hosted, the address the account is using with the mobile wallet, and a public key that can be used to encrypt information for the account.\n\nUSAGE\n  $ celocli account:show ADDRESS\n\nOPTIONS\n  --globalHelp  View all available global flags\n\nEXAMPLE\n  show 0x5409ed021d9299bf6814279a6a1411a7e866a631\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/show.ts"},"src/commands/account/show.ts"))),(0,c.kt)("h2",{id:"celocli-accountshow-claimed-accounts-address"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:show-claimed-accounts ADDRESS")),(0,c.kt)("p",null,"Show information about claimed accounts"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Show information about claimed accounts\n\nUSAGE\n  $ celocli account:show-claimed-accounts ADDRESS\n\nOPTIONS\n  --globalHelp  View all available global flags\n\nEXAMPLE\n  show-claimed-accounts 0x5409ed021d9299bf6814279a6a1411a7e866a631\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/show-claimed-accounts.ts"},"src/commands/account/show-claimed-accounts.ts"))),(0,c.kt)("h2",{id:"celocli-accountshow-metadata-file"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:show-metadata FILE")),(0,c.kt)("p",null,"Show the data in a local metadata file"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Show the data in a local metadata file\n\nUSAGE\n  $ celocli account:show-metadata FILE\n\nARGUMENTS\n  FILE  Path of the metadata file\n\nOPTIONS\n  -x, --extended          show extra columns\n  --columns=columns       only show provided columns (comma-separated)\n  --csv                   output is csv format [alias: --output=csv]\n  --filter=filter         filter property by partial string matching, ex: name=foo\n  --globalHelp            View all available global flags\n  --no-header             hide table header from output\n  --no-truncate           do not truncate output to fit screen\n  --output=csv|json|yaml  output in a more machine friendly format\n  --sort=sort             property to sort by (prepend '-' for descending)\n\nEXAMPLE\n  show-metadata ~/metadata.json\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/show-metadata.ts"},"src/commands/account/show-metadata.ts"))),(0,c.kt)("h2",{id:"celocli-accountunlock-account"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:unlock ACCOUNT")),(0,c.kt)("p",null,"Unlock an account address to send transactions or validate blocks"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"Unlock an account address to send transactions or validate blocks\n\nUSAGE\n  $ celocli account:unlock ACCOUNT\n\nARGUMENTS\n  ACCOUNT  Account address\n\nOPTIONS\n  --duration=duration  Duration in seconds to leave the account unlocked. Unlocks until\n                       the node exits by default.\n\n  --globalHelp         View all available global flags\n\n  --password=password  Password used to unlock the account. If not specified, you will\n                       be prompted for a password.\n\nEXAMPLES\n  unlock 0x5409ed021d9299bf6814279a6a1411a7e866a631\n\n  unlock 0x5409ed021d9299bf6814279a6a1411a7e866a631 --duration 600\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/unlock.ts"},"src/commands/account/unlock.ts"))),(0,c.kt)("h2",{id:"celocli-accountverify-proof-of-possession"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli account:verify-proof-of-possession")),(0,c.kt)("p",null,'Verify a proof-of-possession. See the "account:proof-of-possession" command for more details.'),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},'Verify a proof-of-possession. See the "account:proof-of-possession" command for more details.\n\nUSAGE\n  $ celocli account:verify-proof-of-possession\n\nOPTIONS\n  --account=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d  (required) Address of the\n                                                        account that needs to prove\n                                                        possession of the signer key.\n\n  --globalHelp                                          View all available global flags\n\n  --signature=0x                                        (required) Signature (a.k.a.\n                                                        proof-of-possession) of the\n                                                        signer key\n\n  --signer=0xc1912fEE45d61C87Cc5EA59DaE31190FFFFf232d   (required) Address of the signer\n                                                        key to verify proof of\n                                                        possession.\n\nEXAMPLE\n  verify-proof-of-possession --account 0x199eDF79ABCa29A2Fa4014882d3C13dC191A5B58\n  --signer 0x0EdeDF7B1287f07db348997663EeEb283D70aBE7 --signature\n  0x1c5efaa1f7ca6484d49ccce76217e2fba0552c0b23462cff7ba646473bc2717ffc4ce45be89bd5be9b5d\n  23305e87fc2896808467c4081d9524a84c01b89ec91ca3\n')),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/celo-org/celo-monorepo/tree/master/packages/cli/src/commands/account/verify-proof-of-possession.ts"},"src/commands/account/verify-proof-of-possession.ts"))))}u.isMDXComponent=!0}}]);