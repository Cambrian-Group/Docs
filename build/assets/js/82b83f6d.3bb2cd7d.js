"use strict";(self.webpackChunkcelo_docs=self.webpackChunkcelo_docs||[]).push([[3206],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=s(n),f=o,g=d["".concat(p,".").concat(f)]||d[f]||c[f]||a;return n?r.createElement(g,l(l({ref:t},u),{},{components:n})):r.createElement(g,l({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var s=2;s<a;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67531:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var r=n(83117),o=n(80102),a=(n(67294),n(3905)),l=["components"],i={title:"Celo DAppKit Setup",description:"How to configure and install DAppKit to begin building on Celo.",slug:"/developer-guide/dappkit/setup"},p="Setup",s={unversionedId:"developer-resources/dappkit/setup",id:"developer-resources/dappkit/setup",title:"Celo DAppKit Setup",description:"How to configure and install DAppKit to begin building on Celo.",source:"@site/docs/developer-resources/dappkit/setup.md",sourceDirName:"developer-resources/dappkit",slug:"/developer-guide/dappkit/setup",permalink:"/developer-guide/dappkit/setup",editUrl:"https://github.com/celo-org/docs/edit/main/docs/developer-resources/dappkit/setup.md",tags:[],version:"current",frontMatter:{title:"Celo DAppKit Setup",description:"How to configure and install DAppKit to begin building on Celo.",slug:"/developer-guide/dappkit/setup"},sidebar:"developers",previous:{title:"Celo DAppKit",permalink:"/developer-guide/dappkit"},next:{title:"Celo DAppKit Usage",permalink:"/developer-guide/dappkit/usage"}},u=[{value:"Quick Start",id:"quick-start",children:[],level:2},{value:"Configuration",id:"configuration",children:[{value:"Installation",id:"installation",children:[],level:3},{value:"Typescript Support",id:"typescript-support",children:[],level:3},{value:"Setup",id:"setup-1",children:[],level:3}],level:2}],c={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"setup"},"Setup"),(0,a.kt)("p",null,"How to configure and install DAppKit to begin building on Celo."),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"quick-start"},"Quick Start"),(0,a.kt)("p",null,"To get started, it is easiest to just use our Truffle Box template at ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/celo-org/celo-dappkit"},"https://github.com/celo-org/celo-dappkit"),'. This repository includes a "Hello World" example for getting started with DappKit.'),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"Read on for more details about how to set up and configure DappKit. "),(0,a.kt)("h3",{id:"installation"},"Installation"),(0,a.kt)("p",null,"To create a new expo project, you'll want to use the expo-cli"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install expo-cli --global\n// or\nyarn global add expo-cli\n\nexpo init $YOUR_APP_NAME\n")),(0,a.kt)("p",null,"Read more about general Expo setup at ",(0,a.kt)("a",{parentName:"p",href:"https://expo.io/learn"},"https://expo.io/learn")),(0,a.kt)("h3",{id:"typescript-support"},"Typescript Support"),(0,a.kt)("p",null,"We are big fans of Typescript, so if you used the tabs template, you can support typescript by just following ",(0,a.kt)("a",{parentName:"p",href:"https://docs.expo.io/versions/latest/guides/typescript/"},"these guidelines")),(0,a.kt)("h3",{id:"setup-1"},"Setup"),(0,a.kt)("p",null,"To add DAppKit, run"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @celo/dappkit\n// or\nyarn add @celo/dappkit\n")),(0,a.kt)("p",null,"You will need node version ",(0,a.kt)("inlineCode",{parentName:"p"},"8.13.0")," or higher."),(0,a.kt)("p",null,"DAppKit's dependencies require a bit of adjustment to a vanilla Expo. The first are a lot of the Node.js modules that are expected. You can get those mostly by using the following modules"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install node-libs-react-native vm-browserify\n// or\nyarn add node-libs-react-native vm-browserify\n")),(0,a.kt)("p",null,"You will need to add the following ",(0,a.kt)("inlineCode",{parentName:"p"},"metro.config.js")," to your project root and make sure that the associated npm packages are installed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const crypto = require.resolve('crypto-browserify')\nconst url = require.resolve('url/')\nmodule.exports = {\n  resolver: {\n    extraNodeModules: {\n      crypto,\n      url,\n      fs: require.resolve('expo-file-system'),\n      http: require.resolve('stream-http'),\n      https: require.resolve('https-browserify'),\n      net: require.resolve('react-native-tcp'),\n      os: require.resolve('os-browserify/browser.js'),\n      path: require.resolve('path-browserify'),\n      stream: require.resolve('readable-stream'),\n    }\n  }\n}\n")),(0,a.kt)("p",null,"This should allow you to build the project, however some dependencies might expect certain invariants on the global environment. For that you should create a file ",(0,a.kt)("inlineCode",{parentName:"p"},"global.ts")," with the following contents and then add ",(0,a.kt)("inlineCode",{parentName:"p"},"import './global'")," at the top of your ",(0,a.kt)("inlineCode",{parentName:"p"},"App.js/tsx")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface Global {\n  btoa: any\n  self: any\n  Buffer: any\n  process: any\n  location: any\n}\n\ndeclare var global: Global\nif (typeof global.self === 'undefined') {\n  global.self = global\n}\nif (typeof btoa === 'undefined') {\n  global.btoa = function (str) {\n    return new Buffer(str, 'binary').toString('base64')\n  }\n}\n\nglobal.Buffer = require('buffer').Buffer\nglobal.process = require('process')\nglobal.location = {\n  protocol: 'https',\n}\n")),(0,a.kt)("p",null,"You may also get two warnings that can be ignored, you can suppress them in the yellow banner with the following in your ",(0,a.kt)("inlineCode",{parentName:"p"},"App.js/tsx"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { YellowBox } from 'react-native'\n\nYellowBox.ignoreWarnings([\n  \"Warning: The provided value 'moz\",\n  \"Warning: The provided value 'ms-stream\",\n])\n")))}d.isMDXComponent=!0}}]);