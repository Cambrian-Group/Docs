"use strict";(self.webpackChunkcelo_docs=self.webpackChunkcelo_docs||[]).push([[3524],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),u=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return o.createElement(i.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},s=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,i=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),s=u(n),f=r,d=s["".concat(i,".").concat(f)]||s[f]||m[f]||c;return n?o.createElement(d,l(l({ref:t},p),{},{components:n})):o.createElement(d,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,l=new Array(c);l[0]=s;var a={};for(var i in t)hasOwnProperty.call(t,i)&&(a[i]=t[i]);a.originalType=e,a.mdxType="string"==typeof e?e:r,l[1]=a;for(var u=2;u<c;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}s.displayName="MDXCreateElement"},73580:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return i},metadata:function(){return u},toc:function(){return p},default:function(){return s}});var o=n(83117),r=n(80102),c=(n(67294),n(3905)),l=["components"],a={},i="celocli autocomplete",u={unversionedId:"command-line-interface/autocomplete",id:"command-line-interface/autocomplete",title:"celocli autocomplete",description:"display autocomplete installation instructions",source:"@site/docs/command-line-interface/autocomplete.md",sourceDirName:"command-line-interface",slug:"/command-line-interface/autocomplete",permalink:"/command-line-interface/autocomplete",editUrl:"https://github.com/celo-org/docs/edit/main/docs/command-line-interface/autocomplete.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"celocli account",permalink:"/command-line-interface/account"},next:{title:"celocli commands",permalink:"/command-line-interface/commands"}},p=[{value:"<code>celocli autocomplete [SHELL]</code>",id:"celocli-autocomplete-shell",children:[],level:2}],m={toc:p};function s(e){var t=e.components,n=(0,r.Z)(e,l);return(0,c.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,c.kt)("h1",{id:"celocli-autocomplete"},(0,c.kt)("inlineCode",{parentName:"h1"},"celocli autocomplete")),(0,c.kt)("p",null,"display autocomplete installation instructions"),(0,c.kt)("h2",{id:"celocli-autocomplete-shell"},(0,c.kt)("inlineCode",{parentName:"h2"},"celocli autocomplete [SHELL]")),(0,c.kt)("p",null,"display autocomplete installation instructions"),(0,c.kt)("pre",null,(0,c.kt)("code",{parentName:"pre"},"display autocomplete installation instructions\n\nUSAGE\n  $ celocli autocomplete [SHELL]\n\nARGUMENTS\n  SHELL  shell type\n\nOPTIONS\n  -r, --refresh-cache  Refresh cache (ignores displaying instructions)\n\nEXAMPLES\n  $ celocli autocomplete\n\n  $ celocli autocomplete bash\n\n  $ celocli autocomplete zsh\n\n  $ celocli autocomplete --refresh-cache\n")),(0,c.kt)("p",null,(0,c.kt)("em",{parentName:"p"},"See code: ",(0,c.kt)("a",{parentName:"em",href:"https://github.com/oclif/plugin-autocomplete/blob/v0.1.5/src/commands/autocomplete/index.ts"},"@oclif/plugin-autocomplete"))))}s.isMDXComponent=!0}}]);